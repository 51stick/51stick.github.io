<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Drools加载StatefulKnowledgeSession的三种方法]]></title>
      <url>/2017/07/07/drools-ksession-load/</url>
      <content type="html"><![CDATA[<p>本文主要介绍drools中加载StatefulKnowledgeSessionde的方式<br><a id="more"></a></p>
<p>注意：本文主要摘抄与官方文档翻译。</p>
<h3 id="概要介绍"><a href="#概要介绍" class="headerlink" title="概要介绍"></a>概要介绍</h3><p>本文主要介绍drools中三种加载StatefulKnowledgeSession的方法，分别如下：</p>
<ul>
<li><p>从本地加载StatefulKnowledgeSession</p>
</li>
<li><p>从KnowledgeAgent加载StatefulKnowledgeSession</p>
</li>
<li><p>从远程URL加载StatefulKnowledgeSession</p>
</li>
</ul>
<pre><code>Note: The source code path: ./drools/ksession, KnowledgeAgentUsage.drl should synchronised to Guvnor and org.drools.examples build successful in Guvnor
</code></pre><h3 id="从本地加载-ksession"><a href="#从本地加载-ksession" class="headerlink" title="从本地加载 ksession"></a>从本地加载 ksession</h3><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StatefulKnowledgeSession <span class="title">readKnowledgeSession</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  kbuilder.add(ResourceFactory.newClassPathResource(name),ResourceType.DRL);</div><div class="line">  KnowledgeBuilderErrors errors = kbuilder.getErrors();</div><div class="line">  KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();</div><div class="line">  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());</div><div class="line">  <span class="keyword">return</span> kbase.newStatefulKnowledgeSession();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="从KnowledgeAgent加载StatefulKnowledgeSession"><a href="#从KnowledgeAgent加载StatefulKnowledgeSession" class="headerlink" title="从KnowledgeAgent加载StatefulKnowledgeSession"></a>从KnowledgeAgent加载StatefulKnowledgeSession</h3><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StatefulKnowledgeSession <span class="title">readKnowledgeSession</span><span class="params">(String changeset)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  kagent = KnowledgeAgentFactory.newKnowledgeAgent(<span class="string">"kagent"</span>);</div><div class="line">  ResourceFactory.getResourceChangeNotifierService().start();</div><div class="line">  ResourceFactory.getResourceChangeScannerService().start();</div><div class="line">  kagent.setSystemEventListener(<span class="keyword">new</span> PrintStreamSystemEventListener());</div><div class="line">  kagent.applyChangeSet(ResourceFactory.newClassPathResource(changeset));</div><div class="line">  KnowledgeBase kbase = kagent.getKnowledgeBase();</div><div class="line">  <span class="keyword">return</span> kbase.newStatefulKnowledgeSession();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="从远程URL加载StatefulKnowledgeSession"><a href="#从远程URL加载StatefulKnowledgeSession" class="headerlink" title="从远程URL加载StatefulKnowledgeSession"></a>从远程URL加载StatefulKnowledgeSession</h3><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StatefulKnowledgeSession <span class="title">newKnowledgeSession</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  UrlResource resource = (UrlResource) ResourceFactory.newUrlResource(url);</div><div class="line">  resource.setBasicAuthentication(<span class="string">"enabled"</span>);</div><div class="line">  resource.setUsername(<span class="string">"admin"</span>);</div><div class="line">  resource.setPassword(<span class="string">"admin"</span>);</div><div class="line">  KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();</div><div class="line">  kbuilder.add(resource, ResourceType.PKG);</div><div class="line">  KnowledgeBase kbase = kbuilder.newKnowledgeBase();</div><div class="line">  <span class="keyword">return</span> kbase.newStatefulKnowledgeSession();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> drools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> drools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Partition a List in Java]]></title>
      <url>/2017/05/13/google-guava-partition-a-list/</url>
      <content type="html"><![CDATA[<p>In this tutorial I will illustrate how to split a List into several sublists of a given size.<br><a id="more"></a></p>
<h3 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h3><p>In this tutorial I will illustrate how to split a List into several sublists of a given size.</p>
<p>For a relatively simple operation, there is surprisingly no support in the standard Java collection APIs. Luckily, both Guava and the Apache Commons Collections have implemented the operation in a similar way.</p>
<p>This article is part of the �Java � Back to Basic� series here on Baeldung.</p>
<h3 id="2-Use-Guava-to-partition-the-List"><a href="#2-Use-Guava-to-partition-the-List" class="headerlink" title="2. Use Guava to partition the List"></a>2. Use Guava to partition the List</h3><p>Guava facilitates partitioning the List into sublists of a specified size � via the Lists.partition operation:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenList_whenParitioningIntoNSublists_thenCorrect</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; intList = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; subSets = Lists.partition(intList, <span class="number">3</span>);</div><div class="line"> </div><div class="line">    List&lt;Integer&gt; lastPartition = subSets.get(<span class="number">2</span>);</div><div class="line">    List&lt;Integer&gt; expectedLastPartition = Lists.&lt;Integer&gt; newArrayList(<span class="number">7</span>, <span class="number">8</span>);</div><div class="line">    assertThat(subSets.size(), equalTo(<span class="number">3</span>));</div><div class="line">    assertThat(lastPartition, equalTo(expectedLastPartition));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-1-Use-Guava-to-partition-a-Collection"><a href="#2-1-Use-Guava-to-partition-a-Collection" class="headerlink" title="2.1 Use Guava to partition a Collection"></a>2.1 Use Guava to partition a Collection</h4><p>Partitioning a Collection is also possible with Guava:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenCollection_whenParitioningIntoNSublists_thenCorrect</span><span class="params">()</span> </span>&#123;</div><div class="line">    Collection&lt;Integer&gt; intCollection = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line"> </div><div class="line">    Iterable&lt;List&lt;Integer&gt;&gt; subSets = Iterables.partition(intCollection, <span class="number">3</span>);</div><div class="line"> </div><div class="line">    List&lt;Integer&gt; firstPartition = subSets.iterator().next();</div><div class="line">    List&lt;Integer&gt; expectedLastPartition = Lists.&lt;Integer&gt; newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">    assertThat(firstPartition, equalTo(expectedLastPartition));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Keep in mind that the partitions are sublist views of the original collection � which means that changes in the original collection will be reflected in the partitions:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenListPartitioned_whenOriginalListIsModified_thenPartitionsChangeAsWell</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Given</span></div><div class="line">    List&lt;Integer&gt; intList = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; subSets = Lists.partition(intList, <span class="number">3</span>);</div><div class="line"> </div><div class="line">    <span class="comment">// When</span></div><div class="line">    intList.add(<span class="number">9</span>);</div><div class="line"> </div><div class="line">    <span class="comment">// Then</span></div><div class="line">    List&lt;Integer&gt; lastPartition = subSets.get(<span class="number">2</span>);</div><div class="line">    List&lt;Integer&gt; expectedLastPartition = Lists.&lt;Integer&gt; newArrayList(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</div><div class="line">    assertThat(lastPartition, equalTo(expectedLastPartition));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-Use-Apache-Commons-Collections-to-partition-the-List"><a href="#3-Use-Apache-Commons-Collections-to-partition-the-List" class="headerlink" title="3. Use Apache Commons Collections to partition the List"></a>3. Use Apache Commons Collections to partition the List</h3><p>The latest releases of Apache Commons Collections have recently added support for partitioning a List as well:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenList_whenParitioningIntoNSublists_thenCorrect</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; intList = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; subSets = ListUtils.partition(intList, <span class="number">3</span>);</div><div class="line"> </div><div class="line">    List&lt;Integer&gt; lastPartition = subSets.get(<span class="number">2</span>);</div><div class="line">    List&lt;Integer&gt; expectedLastPartition = Lists.&lt;Integer&gt; newArrayList(<span class="number">7</span>, <span class="number">8</span>);</div><div class="line">    assertThat(subSets.size(), equalTo(<span class="number">3</span>));</div><div class="line">    assertThat(lastPartition, equalTo(expectedLastPartition));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>There is no corresponding option to partition a raw Collection � similar to the Guava Iterables.partition in Commons Collections.</p>
<p>Finally, the same caveat applies here as well � the resulting partition are views of the original List.</p>
<h3 id="3-Use-Java8-to-partition-the-List"><a href="#3-Use-Java8-to-partition-the-List" class="headerlink" title="3. Use Java8 to partition the List"></a>3. Use Java8 to partition the List</h3><h3 id="3-1-Collectors-partitioningBy"><a href="#3-1-Collectors-partitioningBy" class="headerlink" title="3.1 Collectors partitioningBy"></a>3.1 Collectors partitioningBy</h3><p>We can use Collectors.partitioningBy() to split the list into 2 sublists � as follows:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenList_whenParitioningIntoSublistsUsingPartitionBy_thenCorrect</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; intList = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line"> </div><div class="line">    Map&lt;Boolean, List&lt;Integer&gt;&gt; groups = </div><div class="line">      intList.stream().collect(Collectors.partitioningBy(s -&gt; s &gt; <span class="number">6</span>));</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; subSets = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(groups.values());</div><div class="line"> </div><div class="line">    List&lt;Integer&gt; lastPartition = subSets.get(<span class="number">1</span>);</div><div class="line">    List&lt;Integer&gt; expectedLastPartition = Lists.&lt;Integer&gt; newArrayList(<span class="number">7</span>, <span class="number">8</span>);</div><div class="line">    assertThat(subSets.size(), equalTo(<span class="number">2</span>));</div><div class="line">    assertThat(lastPartition, equalTo(expectedLastPartition));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Note: The resulting partitions are not a view of the main List, so any changes happen to the main List won�t affect the partitions.</p>
<h4 id="3-2-Collectors-groupingBy"><a href="#3-2-Collectors-groupingBy" class="headerlink" title="3.2 Collectors groupingBy"></a>3.2 Collectors groupingBy</h4><p>We also can use Collectors.groupingBy() to split our list to multiple partitions:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">givenList_whenParitioningIntoNSublistsUsingGroupingBy_thenCorrect</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; intList = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line"> </div><div class="line">    Map&lt;Integer, List&lt;Integer&gt;&gt; groups = </div><div class="line">      intList.stream().collect(Collectors.groupingBy(s -&gt; (s - <span class="number">1</span>) / <span class="number">3</span>));</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; subSets = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(groups.values());</div><div class="line"> </div><div class="line">    List&lt;Integer&gt; lastPartition = subSets.get(<span class="number">2</span>);</div><div class="line">    List&lt;Integer&gt; expectedLastPartition = Lists.&lt;Integer&gt; newArrayList(<span class="number">7</span>, <span class="number">8</span>);</div><div class="line">    assertThat(subSets.size(), equalTo(<span class="number">3</span>));</div><div class="line">    assertThat(lastPartition, equalTo(expectedLastPartition));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Note: Just as Collectors.partitioningBy() � the resulting partitions won�t be affected by changes in main List.</p>
<p>####3.3  Split the List by separator<br>We can also use Java8 to split our List by separator:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenList_whenSplittingBySeparator_thenCorrect</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; intList = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>);</div><div class="line"> </div><div class="line">    <span class="keyword">int</span>[] indexes = </div><div class="line">      Stream.of(IntStream.of(-<span class="number">1</span>), IntStream.range(<span class="number">0</span>, intList.size())</div><div class="line">      .filter(i -&gt; intList.get(i) == <span class="number">0</span>), IntStream.of(intList.size()))</div><div class="line">      .flatMapToInt(s -&gt; s).toArray();</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; subSets = </div><div class="line">      IntStream.range(<span class="number">0</span>, indexes.length - <span class="number">1</span>)</div><div class="line">               .mapToObj(i -&gt; intList.subList(indexes[i] + <span class="number">1</span>, indexes[i + <span class="number">1</span>]))</div><div class="line">               .collect(Collectors.toList());</div><div class="line"> </div><div class="line">    List&lt;Integer&gt; lastPartition = subSets.get(<span class="number">2</span>);</div><div class="line">    List&lt;Integer&gt; expectedLastPartition = Lists.&lt;Integer&gt; newArrayList(<span class="number">7</span>, <span class="number">8</span>);</div><div class="line">    assertThat(subSets.size(), equalTo(<span class="number">3</span>));</div><div class="line">    assertThat(lastPartition, equalTo(expectedLastPartition));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Note: We used �0� as separator � we first obtained the indices of all �0� elements in the List, then we split the List on these indices.</p>
<p>###4. Conclusion<br>The solutions presented here makes use of additional libraries � Guava or the Apache Commons Collections library. Both of these are very lightweight and extremely useful overall, so it makes perfect sense to have one of them on the classpath; however, if that is not an option � a Java only solution is shown here.</p>
<p>The implementation of all these examples and code snippets can be found in my github project � this is an Eclipse based project, so it should be easy to import and run as it is.</p>
]]></content>
      
        <categories>
            
            <category> guava </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Guava Function Cookbook]]></title>
      <url>/2017/05/08/google-guava-functional-cookbook/</url>
      <content type="html"><![CDATA[<p>This cookbook is organized into small and focused recipes and code snippets for using the Guava functional-style elements � Predicates and Functions.<br><a id="more"></a></p>
<h3 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h3><p>This cookbook is organized into small and focused recipes and code snippets for using the Guava functional-style elements � Predicates and Functions.</p>
<p>The cookbook format is focused and practical � no extraneous details and explanations necessary.</p>
<h3 id="2-The-Cookbook"><a href="#2-The-Cookbook" class="headerlink" title="2. The Cookbook"></a>2. The Cookbook</h3><h4 id="2-1-filter-a-collection-by-a-condition-custom-Predicate"><a href="#2-1-filter-a-collection-by-a-condition-custom-Predicate" class="headerlink" title="2.1 filter a collection by a condition (custom Predicate)"></a>2.1 filter a collection by a condition (custom Predicate)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">34</span>, <span class="number">57</span>, <span class="number">89</span>);</div><div class="line">Predicate&lt;Integer&gt; acceptEven = <span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Integer number)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (number % <span class="number">2</span>) == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">List&lt;Integer&gt; evenNumbers = Lists.newArrayList(Collections2.filter(numbers, acceptEven));</div><div class="line">Integer found = Collections.binarySearch(evenNumbers, <span class="number">57</span>);</div><div class="line">assertThat(found, lessThan(<span class="number">0</span>));</div></pre></td></tr></table></figure>
<h4 id="2-2-filter-out-nulls-from-a-collection"><a href="#2-2-filter-out-nulls-from-a-collection" class="headerlink" title="2.2 filter out nulls from a collection"></a>2.2 filter out nulls from a collection</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; withNulls = Lists.newArrayList(<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="keyword">null</span>, <span class="string">"def"</span>);</div><div class="line">Iterable&lt;String&gt; withoutNuls = Iterables.filter(withNulls, Predicates.notNull());</div><div class="line">assertTrue(Iterables.all(withoutNuls, Predicates.notNull()));</div></pre></td></tr></table></figure>
<h4 id="2-3-check-condition-for-all-elements-of-a-collection"><a href="#2-3-check-condition-for-all-elements-of-a-collection" class="headerlink" title="2.3 check condition for all elements of a collection"></a>2.3 check condition for all elements of a collection</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; evenNumbers = Lists.newArrayList(<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">34</span>, <span class="number">90</span>);</div><div class="line">Predicate&lt;Integer&gt; acceptEven = <span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Integer number)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (number % <span class="number">2</span>) == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">boolean</span> result = Iterables.all(evenNumbers, acceptEven);</div></pre></td></tr></table></figure>
<h4 id="2-4-negate-a-predicate"><a href="#2-4-negate-a-predicate" class="headerlink" title="2.4 negate a predicate"></a>2.4 negate a predicate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; evenNumbers = Lists.newArrayList(<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">34</span>, <span class="number">90</span>);</div><div class="line">Predicate&lt;Integer&gt; acceptOdd = <span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Integer number)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (number % <span class="number">2</span>) != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">assertTrue(Iterables.all(evenNumbers, Predicates.not(acceptOdd)));</div></pre></td></tr></table></figure>
<h4 id="2-5-apply-a-simple-function"><a href="#2-5-apply-a-simple-function" class="headerlink" title="2.5 apply a simple function"></a>2.5 apply a simple function</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">List&lt;String&gt; asStrings = Lists.transform(numbers, Functions.toStringFunction());</div><div class="line">assertThat(asStrings, contains(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>));</div></pre></td></tr></table></figure>
<h4 id="2-6-sort-collection-by-first-applying-an-intermediary-function"><a href="#2-6-sort-collection-by-first-applying-an-intermediary-function" class="headerlink" title="2.6 sort collection by first applying an intermediary function"></a>2.6 sort collection by first applying an intermediary function</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">100</span>, <span class="number">8</span>, <span class="number">14</span>);</div><div class="line">Ordering&lt;Object&gt; ordering = Ordering.natural().onResultOf(Functions.toStringFunction());</div><div class="line">List&lt;Integer&gt; inAlphabeticalOrder = ordering.sortedCopy(numbers);</div><div class="line">List&lt;Integer&gt; correctAlphabeticalOrder = Lists.newArrayList(<span class="number">1</span>, <span class="number">100</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">8</span>);</div><div class="line">assertThat(correctAlphabeticalOrder, equalTo(inAlphabeticalOrder));</div></pre></td></tr></table></figure>
<h4 id="2-7-complex-example-�-chaining-predicates-and-functions"><a href="#2-7-complex-example-�-chaining-predicates-and-functions" class="headerlink" title="2.7 complex example � chaining predicates and functions"></a>2.7 complex example � chaining predicates and functions</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">100</span>, <span class="number">8</span>, <span class="number">14</span>);</div><div class="line">Predicate&lt;Integer&gt; acceptEvenNumber = <span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Integer number)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (number % <span class="number">2</span>) == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Function&lt;Integer, Integer&gt; powerOfTwo = <span class="keyword">new</span> Function&lt;Integer, Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.pow(input, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">FluentIterable&lt;Integer&gt; powerOfTwoOnlyForEvenNumbers = </div><div class="line">FluentIterable.from(numbers).filter(acceptEvenNumber).transform(powerOfTwo);</div><div class="line">assertThat(powerOfTwoOnlyForEvenNumbers, contains(<span class="number">4</span>, <span class="number">10000</span>, <span class="number">64</span>, <span class="number">196</span>));</div></pre></td></tr></table></figure>
<h4 id="2-8-compose-two-functions"><a href="#2-8-compose-two-functions" class="headerlink" title="2.8 compose two functions"></a>2.8 compose two functions</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">Function&lt;Integer, Integer&gt; powerOfTwo = <span class="keyword">new</span> Function&lt;Integer, Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.pow(input, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">List&lt;Integer&gt; result = Lists.transform(numbers, </div><div class="line">    Functions.compose(powerOfTwo, powerOfTwo));</div><div class="line">assertThat(result, contains(<span class="number">16</span>, <span class="number">81</span>));</div></pre></td></tr></table></figure>
<h4 id="2-9-create-a-Map-backed-by-a-Set-and-a-Function"><a href="#2-9-create-a-Map-backed-by-a-Set-and-a-Function" class="headerlink" title="2.9 create a Map backed by a Set and a Function"></a>2.9 create a Map backed by a Set and a Function</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer, Integer&gt; powerOfTwo = <span class="keyword">new</span> Function&lt;Integer, Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.pow(input, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Set&lt;Integer&gt; lowNumbers = Sets.newHashSet(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line"> </div><div class="line">Map&lt;Integer, Integer&gt; numberToPowerOfTwoMuttable = Maps.asMap(lowNumbers, powerOfTwo);</div><div class="line">Map&lt;Integer, Integer&gt; numberToPowerOfTwoImuttable = Maps.toMap(lowNumbers, powerOfTwo);</div><div class="line">assertThat(numberToPowerOfTwoMuttable.get(<span class="number">2</span>), equalTo(<span class="number">4</span>));</div><div class="line">assertThat(numberToPowerOfTwoImuttable.get(<span class="number">2</span>), equalTo(<span class="number">4</span>));</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> guava </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Guava Collections Cookbook]]></title>
      <url>/2017/04/30/google-guava-collections-cookbook/</url>
      <content type="html"><![CDATA[<p>This cookbook article is organized into small and focused recipes and code snippets for using Guava style collections.<br><a id="more"></a></p>
<h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p>This cookbook article is organized into small and focused recipes and code snippets for using Guava style collections.</p>
<p>The format is that of a growing list of code examples with no additional explanation necessary – it is meant to keep common usages of the API easy to access during development.</p>
<h3 id="2-The-Recipes"><a href="#2-The-Recipes" class="headerlink" title="2. The Recipes"></a>2. The Recipes</h3><h4 id="2-1-downcast-a-List-to-a-List"><a href="#2-1-downcast-a-List-to-a-List" class="headerlink" title="2.1 downcast a List to a List"></a>2.1 downcast a List<parent> to a List<child></child></parent></h4><blockquote>
<p>note: this is a workaround for non-covariant generified collections in Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CastFunction</span>&lt;<span class="title">F</span>, <span class="title">T</span> <span class="keyword">extends</span> <span class="title">F</span>&gt; <span class="keyword">implements</span> <span class="title">Function</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">apply</span><span class="params">(<span class="keyword">final</span> F from)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) from;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">List&lt;TypeParent&gt; originalList = Lists.newArrayList();</div><div class="line">List&lt;TypeChild&gt; theList = Lists.transform(originalList, </div><div class="line">    <span class="keyword">new</span> CastFunction&lt;TypeParent, TypeChild&gt;());</div></pre></td></tr></table></figure></p>
</blockquote>
<p>simpler alternative without Guava – involving 2 cast operations<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;Number&gt; originalList = Lists.newArrayList();</div><div class="line">List&lt;Integer&gt; theList = (List&lt;Integer&gt;) (List&lt;? extends Number&gt;) originalList;</div></pre></td></tr></table></figure></p>
<h4 id="2-2-adding-an-iterable-to-a-collection"><a href="#2-2-adding-an-iterable-to-a-collection" class="headerlink" title="2.2 adding an iterable to a collection"></a>2.2 adding an iterable to a collection</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Iterable&lt;String&gt; iter = Lists.newArrayList();</div><div class="line">Collection&lt;String&gt; collector = Lists.newArrayList();</div><div class="line">Iterables.addAll(collector, iter);</div></pre></td></tr></table></figure>
<h4 id="2-3-check-if-collection-contains-element-s-according-to-a-custom-matching-rule"><a href="#2-3-check-if-collection-contains-element-s-according-to-a-custom-matching-rule" class="headerlink" title="2.3 check if collection contains element(s) according to a custom matching rule"></a>2.3 check if collection contains element(s) according to a custom matching rule</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Iterable&lt;String&gt; theCollection = Lists.newArrayList(<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"def"</span>);</div><div class="line">    <span class="keyword">boolean</span> contains = Iterables.any(theCollection, <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(<span class="keyword">final</span> String input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> input.length() == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">assertTrue(contains);</div></pre></td></tr></table></figure>
<h4 id="2-4-alternative-solution-using-search"><a href="#2-4-alternative-solution-using-search" class="headerlink" title="2.4 alternative solution using search"></a>2.4 alternative solution using search</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Iterable&lt;String&gt; theCollection = Sets.newHashSet(<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"def"</span>);</div><div class="line"><span class="keyword">boolean</span> contains = Iterables.find(theCollection, <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(<span class="keyword">final</span> String input)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> input.length() == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;) != <span class="keyword">null</span>;</div><div class="line">assertTrue(contains);</div></pre></td></tr></table></figure>
<h4 id="2-5-alternative-solution-only-applicable-to-Sets"><a href="#2-5-alternative-solution-only-applicable-to-Sets" class="headerlink" title="2.5 alternative solution only applicable to Sets"></a>2.5 alternative solution only applicable to Sets</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; theCollection = Sets.newHashSet(<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"def"</span>);</div><div class="line"><span class="keyword">boolean</span> contains = !Sets.filter(theCollection, <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(<span class="keyword">final</span> String input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> input.length() == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;).isEmpty();</div><div class="line">assertTrue(contains);</div></pre></td></tr></table></figure>
<p><code>NoSuchElementException</code> on Iterables.find when nothing is found<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Iterable&lt;String&gt; theCollection = Sets.newHashSet(<span class="string">"abcd"</span>, <span class="string">"efgh"</span>, <span class="string">"ijkl"</span>);</div><div class="line">Predicate&lt;String&gt; inputOfLengthOne = <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(<span class="keyword">final</span> String input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> input.length() == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">String found = Iterables.find(theCollection, inputOfLengthOne);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>this will throw the NoSuchElementException exception:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java.util.NoSuchElementException</div><div class="line">    at com.google.common.collect.AbstractIterator.next(AbstractIterator.java:<span class="number">154</span>)</div><div class="line">    at com.google.common.collect.Iterators.find(Iterators.java:<span class="number">712</span>)</div><div class="line">    at com.google.common.collect.Iterables.find(Iterables.java:<span class="number">643</span>)</div></pre></td></tr></table></figure></p>
<p>solution: there is an overloaded find method that takes the default return value as an argument and can be called with null for the desired behavior:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String found = Iterables.find(theCollection, inputOfLengthOne, <span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="2-6-remove-all-null-values-from-a-collection"><a href="#2-6-remove-all-null-values-from-a-collection" class="headerlink" title="2.6 remove all null values from a collection"></a>2.6 remove all null values from a collection</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; values = Lists.newArrayList(<span class="string">"a"</span>, <span class="keyword">null</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">Iterable&lt;String&gt; withoutNulls = Iterables.filter(values, Predicates.notNull());</div></pre></td></tr></table></figure>
<h4 id="2-7-create-immutable-List-Set-Map-directly"><a href="#2-7-create-immutable-List-Set-Map-directly" class="headerlink" title="2.7 create immutable List/Set/Map directly"></a>2.7 create immutable List/Set/Map directly</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ImmutableList&lt;String&gt; immutableList = ImmutableList.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">ImmutableSet&lt;String&gt; immutableSet = ImmutableSet.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">ImmutableMap&lt;String, String&gt; imuttableMap = </div><div class="line">    ImmutableMap.of(<span class="string">"k1"</span>, <span class="string">"v1"</span>, <span class="string">"k2"</span>, <span class="string">"v2"</span>, <span class="string">"k3"</span>, <span class="string">"v3"</span>);</div></pre></td></tr></table></figure>
<h4 id="2-8-create-immutable-List-Set-Map-from-a-standard-collection"><a href="#2-8-create-immutable-List-Set-Map-from-a-standard-collection" class="headerlink" title="2.8 create immutable List/Set/Map from a standard collection"></a>2.8 create immutable List/Set/Map from a standard collection</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; muttableList = Lists.newArrayList();</div><div class="line">ImmutableList&lt;String&gt; immutableList = ImmutableList.copyOf(muttableList);</div><div class="line"> </div><div class="line">Set&lt;String&gt; muttableSet = Sets.newHashSet();</div><div class="line">ImmutableSet&lt;String&gt; immutableSet = ImmutableSet.copyOf(muttableSet);</div><div class="line"> </div><div class="line">Map&lt;String, String&gt; muttableMap = Maps.newHashMap();</div><div class="line">ImmutableMap&lt;String, String&gt; imuttableMap = ImmutableMap.copyOf(muttableMap);</div></pre></td></tr></table></figure>
<h4 id="2-10-alternative-solution-using-builders"><a href="#2-10-alternative-solution-using-builders" class="headerlink" title="2.10 alternative solution using builders"></a>2.10 alternative solution using builders</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; muttableList = Lists.newArrayList();</div><div class="line">ImmutableList&lt;String&gt; immutableList = </div><div class="line">    ImmutableList.&lt;String&gt; builder().addAll(muttableList).build();</div><div class="line"> </div><div class="line">Set&lt;String&gt; muttableSet = Sets.newHashSet();</div><div class="line">ImmutableSet&lt;String&gt; immutableSet = </div><div class="line">    ImmutableSet.&lt;String&gt; builder().addAll(muttableSet).build();</div><div class="line"> </div><div class="line">Map&lt;String, String&gt; muttableMap = Maps.newHashMap();</div><div class="line">ImmutableMap&lt;String, String&gt; imuttableMap = </div><div class="line">    ImmutableMap.&lt;String, String&gt; builder().putAll(muttableMap).build();</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> guava </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始构建 centos+jdk8+tomcat8 Docker镜像]]></title>
      <url>/2017/04/23/docker-build-image-with-centos-jdk-tomcat/</url>
      <content type="html"><![CDATA[<p>本文主要介绍从零开始构建一个基于centos环境，具有jdk，tomcat的docker镜像。展示了怎样从一个基础镜像构建一个自己需要的镜像。下面具体来看看如何操作。<br><a id="more"></a></p>
<h3 id="开始说明"><a href="#开始说明" class="headerlink" title="开始说明"></a>开始说明</h3><p>本文默认所在linux环境已经安装好了docker。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>首先介绍下本文是要的jdk和tomcat版本。</p>
<ol>
<li>jdk-8u131-linux-x64.tar.gz</li>
<li>apache-tomcat-8.5.14.tar.gz</li>
</ol>
<h3 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h3><p>将jdk和tomcat上传到指定的linux路径下并解压。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker]# ls</div><div class="line">apache-tomcat-8.5.14  jdk1.8.0_131</div></pre></td></tr></table></figure></p>
<h3 id="准备基础镜像文件"><a href="#准备基础镜像文件" class="headerlink" title="准备基础镜像文件"></a>准备基础镜像文件</h3><p>从<code>Docker Hub</code>拉去基础镜像文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker pull centos</div></pre></td></tr></table></figure></p>
<p>默认拉去的是tag为latest的centos镜像，镜像拉取成功后，我们可以使用<code>docker images</code>命令查看本地镜像文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker]# docker images</div><div class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">docker.io/centos                  latest              a8493f5f50ff        4 weeks ago         192.5 MB</div></pre></td></tr></table></figure></p>
<p>此时<code>docker.io/centos</code>就是从<code>Docker Hub</code>拉取下来的基础镜像文件。</p>
<h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">FROM docker.io/centos:latest</div><div class="line"></div><div class="line">MAINTAINER liang.chen &quot;229408705@qq.com&quot;</div><div class="line"></div><div class="line">RUN mkdir -p /opt/java/jdk1.8.0_131</div><div class="line">RUN mkdir -p /opt/tomcat/apache-tomcat-8.5.14</div><div class="line"></div><div class="line">ADD ./jdk1.8.0_131/ /opt/java/jdk1.8.0_131/</div><div class="line">ADD ./apache-tomcat-8.5.14/ /opt/tomcat/apache-tomcat-8.5.14/</div><div class="line"></div><div class="line">ENV JAVA_HOME /opt/java/jdk1.8.0_131</div><div class="line">ENV JRE_HOME $JAVA_HOME/jre</div><div class="line">ENV CLASSPATH .:$JAVA_HOME/lib:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line">ENV CATALINA_HOME /opt/tomcat/apache-tomcat-8.5.14</div><div class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin</div><div class="line"></div><div class="line">EXPOSE 8080</div><div class="line"></div><div class="line">CMD [&quot;/opt/tomcat/apache-tomcat-8.5.14/bin/catalina.sh&quot;,&quot;run&quot;]</div></pre></td></tr></table></figure>
<h3 id="编写构建脚本"><a href="#编写构建脚本" class="headerlink" title="编写构建脚本"></a>编写构建脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">docker build --no-cache=true -t &quot;repos_local/centos-jdk8-tomcat8:0.0.1&quot; .</div></pre></td></tr></table></figure>
<p>注意：此处的构建脚本只有一句简单的docker构建的命令，实际工作中，docker的构建脚本可能会涉及到其他很多逻辑。例如，在构建前拉去项目应用包，项目配置文件等。</p>
<h3 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h3><p>执行构建脚本，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker]# ./build.sh </div><div class="line">Sending build context to Docker daemon 586.2 MB</div><div class="line">Step 1 : FROM docker.io/centos:latest</div><div class="line"> ---&gt; a8493f5f50ff</div><div class="line">Step 2 : MAINTAINER liang.chen &quot;229408705@qq.com&quot;</div><div class="line"> ---&gt; Running in 601bdbffbde4</div><div class="line"> ---&gt; 26e8cdd86433</div><div class="line">Removing intermediate container 601bdbffbde4</div><div class="line">Step 3 : RUN mkdir -p /opt/java/jdk1.8.0_131</div><div class="line"> ---&gt; Running in 4baabb3936b6</div><div class="line"> ---&gt; 7b1738e4e96c</div><div class="line">Removing intermediate container 4baabb3936b6</div><div class="line">Step 4 : RUN mkdir -p /opt/tomcat/apache-tomcat-8.5.14</div><div class="line"> ---&gt; Running in d0afc9b3cd18</div><div class="line"> ---&gt; 298988f65c6a</div><div class="line">Removing intermediate container d0afc9b3cd18</div><div class="line">Step 5 : ADD ./jdk1.8.0_131/ /opt/java/jdk1.8.0_131/</div><div class="line"> ---&gt; 8f4398e2ac65</div><div class="line">Removing intermediate container 532486b90ea9</div><div class="line">Step 6 : ADD ./apache-tomcat-8.5.14/ /opt/tomcat/apache-tomcat-8.5.14/</div><div class="line"> ---&gt; 913dd4b486bf</div><div class="line">Removing intermediate container 9d6e553ba0aa</div><div class="line">Step 7 : ENV JAVA_HOME /opt/java/jdk1.8.0_131</div><div class="line"> ---&gt; Running in 19ae93f7e0dd</div><div class="line"> ---&gt; 01c2503c567e</div><div class="line">Removing intermediate container 19ae93f7e0dd</div><div class="line">Step 8 : ENV JRE_HOME $JAVA_HOME/jre</div><div class="line"> ---&gt; Running in 11689dfd11ec</div><div class="line"> ---&gt; c40790cf116b</div><div class="line">Removing intermediate container 11689dfd11ec</div><div class="line">Step 9 : ENV CLASSPATH .:$JAVA_HOME/lib:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line"> ---&gt; Running in 02576f380d9b</div><div class="line"> ---&gt; f64f603a91e3</div><div class="line">Removing intermediate container 02576f380d9b</div><div class="line">Step 10 : ENV CATALINA_HOME /opt/tomcat/apache-tomcat-8.5.14</div><div class="line"> ---&gt; Running in 09c7f880a31a</div><div class="line"> ---&gt; 8aac237520a3</div><div class="line">Removing intermediate container 09c7f880a31a</div><div class="line">Step 11 : ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin</div><div class="line"> ---&gt; Running in 9540a4f48a1c</div><div class="line"> ---&gt; f4718ff45225</div><div class="line">Removing intermediate container 9540a4f48a1c</div><div class="line">Step 12 : EXPOSE 8080</div><div class="line"> ---&gt; Running in 27a8ec657673</div><div class="line"> ---&gt; 7b80cd06456a</div><div class="line">Removing intermediate container 27a8ec657673</div><div class="line">Step 13 : CMD /opt/tomcat/apache-tomcat-8.5.14/bin/catalina.sh run</div><div class="line"> ---&gt; Running in 51365559218c</div><div class="line"> ---&gt; 8b730c606224</div><div class="line">Removing intermediate container 51365559218c</div><div class="line">Successfully built 8b730c606224</div></pre></td></tr></table></figure></p>
<p>如此表示镜像已经构建成功，<code>jdk1.8.0_131</code>和<code>apache-tomcat-8.5.14</code>也已经成功的打进到我们新构建的镜像文件中了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker]# docker images</div><div class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">repos_local/centos-jdk8-tomcat8   0.0.1               8b730c606224        1 hours ago         581.9 MB</div><div class="line">docker.io/centos                  latest              a8493f5f50ff        4 weeks ago         192.5 MB</div></pre></td></tr></table></figure>
<p>现在可以看到，除了基础镜像文件外，多了一个<code>repos_local/centos-jdk8-tomcat8</code>镜像文件，该文件就是我们上面构建的<code>centos+jdk+tomcat</code>的镜像文件了。</p>
<h3 id="运行一个docker容器"><a href="#运行一个docker容器" class="headerlink" title="运行一个docker容器"></a>运行一个docker容器</h3><p>最后，我们来根据新构建的镜像文件，运行一个容器，该容器会启动tomcat。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 8081:8080 --name test-jdk8-tomcat8 repos_local/centos-jdk8-tomcat8:0.0.1</div></pre></td></tr></table></figure></p>
<p>注意：<br><code>-d</code>：后台运行docker容器。<br><code>-p</code>：端口映射。宿主机port:容器port，如此在访问宿主机的ip+port时，就能访问到docker容器中的 应用端口。<br><code>--name</code>：容器名称, 容器id难以记忆，因此可以通过容器名称对容器操作。</p>
<h3 id="查看tomcat启动情况"><a href="#查看tomcat启动情况" class="headerlink" title="查看tomcat启动情况"></a>查看tomcat启动情况</h3><p>由于启动docker容器时没有将tomcat的日志文件映射出来，因此可以直接进入容器中查看启动日志。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost docker]# docker exec -it test-jdk8-tomcat8 /bin/bash</div><div class="line">[root@8cb542667072 /]#</div></pre></td></tr></table></figure></p>
<p>此时用户名已将切换，证明已经进入到运行中的docker容器中了。<br>注意:<br>    <code>-i</code>：捕获标准输入输出。<br>    <code>-t</code>：分配一个终端或控制台。</p>
<p>最后在浏览器中测试下能否访问tomcat，如：<a href="http://192.168.244.128:8081" target="_blank" rel="external">http://192.168.244.128:8081</a></p>
<p><img src="http://i4.buimg.com/1949/3cf760a6f497891b.png" alt="Markdown"></p>
<p>OK,汤猫也成功起来了，证明我们docker镜像构建成功，docker容器启动成功，容器中的应用也正常启动了。</p>
<h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><h4 id="开放指定端口"><a href="#开放指定端口" class="headerlink" title="开放指定端口"></a>开放指定端口</h4><p>开始时，就算tomcat正常启动了，外面也无法正常访问tomcat主界面，因为有可能端口号没有开放出来，外部不能直接访问。</p>
<p>永久开放指定端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 开放8081端口  permanent为永久开放</div><div class="line">firewall-cmd --zone=public --add-port=8081/tcp --permanent</div><div class="line"></div><div class="line"># 重新读取配置</div><div class="line">firewall-cmd --reload</div><div class="line"></div><div class="line"># 查看已经开放的端口</div><div class="line">firewall-cmd --list-all</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker安装指南]]></title>
      <url>/2017/04/22/docker-install-guide/</url>
      <content type="html"><![CDATA[<p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。<br><a id="more"></a></p>
<h3 id="Docker通常用于如下场景"><a href="#Docker通常用于如下场景" class="headerlink" title="Docker通常用于如下场景"></a>Docker通常用于如下场景</h3><ol>
<li>web应用的自动化打包和发布。</li>
<li>自动化测试和持续集成、发布。</li>
<li>在服务型环境中部署和调整数据库或其他的后台应用。</li>
<li>适用于微服务系统部署。</li>
</ol>
<h3 id="基于CentOS安装Docker"><a href="#基于CentOS安装Docker" class="headerlink" title="基于CentOS安装Docker"></a>基于CentOS安装Docker</h3><p>在centos中安装docker非常简单，只需要一个命令即可搞定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install docker</div></pre></td></tr></table></figure></p>
<h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><p>在docker安装完成后，并没有启动docker，所以此时执行docker命令会报以下错误按提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker info</div><div class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</div></pre></td></tr></table></figure></p>
<p>此时我们需要启动docker后台进程服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# systemctl start docker.service</div></pre></td></tr></table></figure></p>
<p>我们也可以将docker后台进程服务设置成开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# systemctl enable docker.service</div></pre></td></tr></table></figure></p>
<p>在启动好了docekr后，我们在来验证下docker是否安装成功且正常启动了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker info</div><div class="line">Containers: 0</div><div class="line"> Running: 0</div><div class="line"> Paused: 0</div><div class="line"> Stopped: 0</div><div class="line">Images: 0</div><div class="line">Server Version: 1.12.6</div><div class="line">Storage Driver: devicemapper</div><div class="line"> Pool Name: docker-8:3-34594283-pool</div><div class="line"> Pool Blocksize: 65.54 kB</div><div class="line"> Base Device Size: 10.74 GB</div><div class="line"> Backing Filesystem: xfs</div><div class="line"> Data file: /dev/loop0</div><div class="line"> Metadata file: /dev/loop1</div><div class="line"> Data Space Used: 11.8 MB</div><div class="line"> Data Space Total: 107.4 GB</div><div class="line"> Data Space Available: 14.26 GB</div><div class="line"> Metadata Space Used: 581.6 kB</div><div class="line"> Metadata Space Total: 2.147 GB</div><div class="line"> Metadata Space Available: 2.147 GB</div><div class="line"> Thin Pool Minimum Free Space: 10.74 GB</div><div class="line"> Udev Sync Supported: true</div><div class="line"> Deferred Removal Enabled: false</div><div class="line"> Deferred Deletion Enabled: false</div><div class="line"> Deferred Deleted Device Count: 0</div><div class="line"> Data loop file: /var/lib/docker/devicemapper/devicemapper/data</div><div class="line"> WARNING: Usage of loopback devices is strongly discouraged for production use. Use `--storage-opt dm.thinpooldev` to specify a custom block storage device.</div><div class="line"> Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata</div><div class="line"> Library Version: 1.02.107-RHEL7 (2015-10-14)</div><div class="line">Logging Driver: journald</div><div class="line">Cgroup Driver: systemd</div><div class="line">Plugins:</div><div class="line"> Volume: local</div><div class="line"> Network: null host bridge overlay</div><div class="line">Swarm: inactive</div><div class="line">Runtimes: docker-runc runc</div><div class="line">Default Runtime: docker-runc</div><div class="line">Security Options: seccomp selinux</div><div class="line">Kernel Version: 3.10.0-327.el7.x86_64</div><div class="line">Operating System: CentOS Linux 7 (Core)</div><div class="line">OSType: linux</div><div class="line">Architecture: x86_64</div><div class="line">Number of Docker Hooks: 2</div><div class="line">CPUs: 1</div><div class="line">Total Memory: 977.9 MiB</div><div class="line">Name: localhost.localdomain</div><div class="line">ID: O6KF:7D3F:R62W:OL6K:FREK:FHGR:5YPL:BQZM:OAOF:5EFF:RY47:VZOB</div><div class="line">Docker Root Dir: /var/lib/docker</div><div class="line">Debug Mode (client): false</div><div class="line">Debug Mode (server): false</div><div class="line">Registry: https://index.docker.io/v1/</div><div class="line">WARNING: bridge-nf-call-iptables is disabled</div><div class="line">WARNING: bridge-nf-call-ip6tables is disabled</div><div class="line">Insecure Registries:</div><div class="line"> 127.0.0.0/8</div><div class="line">Registries: docker.io (secure)</div></pre></td></tr></table></figure></p>
<p>如果显示为类似上面的信息，则证明docker已经成功安装并启动了。</p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在linux上开放指定端口号?]]></title>
      <url>/2017/04/14/linux-open-port/</url>
      <content type="html"><![CDATA[<p>有时候，在linux上访问一个应用程序时，明明已将正常启动，但就是无法访问，此时可能的原因之一是程序的访问端口号没有对外开放，导致无法正确访问，本文将介绍如何在linux上开放指定端口号。<br><a id="more"></a></p>
<h3 id="方法一：开放指定端口"><a href="#方法一：开放指定端口" class="headerlink" title="方法一：开放指定端口"></a>方法一：开放指定端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 开放8081端口  permanent为永久开放</div><div class="line">firewall-cmd --zone=public --add-port=8081/tcp --permanent</div><div class="line"></div><div class="line"># 重新读取配置</div><div class="line">firewall-cmd --reload</div><div class="line"></div><div class="line"># 查看已经开放的端口</div><div class="line">firewall-cmd --list-all</div></pre></td></tr></table></figure>
<h3 id="方法二：开放指定端口"><a href="#方法二：开放指定端口" class="headerlink" title="方法二：开放指定端口"></a>方法二：开放指定端口</h3><p><code>注意</code>：这种开放端口号的方式重启后设置可能会失效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -ptcp --dport 8081 -j ACCEPT</div></pre></td></tr></table></figure></p>
<h3 id="方法三：开放指定端口"><a href="#方法三：开放指定端口" class="headerlink" title="方法三：开放指定端口"></a>方法三：开放指定端口</h3><h4 id="修改iptables文件"><a href="#修改iptables文件" class="headerlink" title="修改iptables文件"></a>修改iptables文件</h4><p><code>注意</code>：这种开放端口的修改方式重启后不会失效。<br>编辑<code>/etc/sysconfig/iptables</code>文件插入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8081 -j ACCEPT</div></pre></td></tr></table></figure></p>
<h4 id="重启服务iptables服务"><a href="#重启服务iptables服务" class="headerlink" title="重启服务iptables服务"></a>重启服务iptables服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git服务迁移]]></title>
      <url>/2017/03/29/git-server-transfer/</url>
      <content type="html"><![CDATA[<p>本文要讲的是一个git的小知识点，即git服务迁移的问题。在遇到原有远程服务迁移时，正确的做法是，先移除本地与之前远程git服务的管理关系，然后重新关联新的git服务地址，最后将本地代码推送至远端。这里说的迁移是指重新搭建一个新的git服务，代码需要重新上传，这也是我最近工作中遇到的一个小问题，在此也做一个小的总结。<br><a id="more"></a></p>
<h3 id="第一步：删除原始服务关联关系"><a href="#第一步：删除原始服务关联关系" class="headerlink" title="第一步：删除原始服务关联关系"></a>第一步：删除原始服务关联关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote rm origin</div></pre></td></tr></table></figure>
<p>因为要迁移服务，所以之前本地仓库与原来的git服务之间的关联关系必须要删除。</p>
<h3 id="第二步：关联新服务地址"><a href="#第二步：关联新服务地址" class="headerlink" title="第二步：关联新服务地址"></a>第二步：关联新服务地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin xxx.git</div></pre></td></tr></table></figure>
<p>在删除原有服务地址关联关系后，需要关联新的项目服务地址。</p>
<h3 id="第三部：推送代码到服务上"><a href="#第三部：推送代码到服务上" class="headerlink" title="第三部：推送代码到服务上"></a>第三部：推送代码到服务上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin *</div></pre></td></tr></table></figure>
<p>上面的命令会将本地所有分支及其<code>tag</code>都推送到新git服务地址所对应的项目中。</p>
<p>总结：虽然本文将的并不是重要知识点且也不具有什么技术含量，在工作中用也不常用，但是这几条命令在遇到git服务迁移时却非常的实用，所以这里本着对自我提升的态度，对自己的工作做个小小的总结。</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot自动配置扩展]]></title>
      <url>/2017/03/26/springboot-auto-configuration-extend/</url>
      <content type="html"><![CDATA[<p>上一篇文章介绍了springboot的自动配置原理，大致分析了其内部实现的机制，本文将进一步介绍springboot自动配置中的几个重要类，跟深入的理解其自动配置的实现。<br><a id="more"></a></p>
<h3 id="重点实现类介绍"><a href="#重点实现类介绍" class="headerlink" title="重点实现类介绍"></a>重点实现类介绍</h3><p>首先我们要重点几个 与自动配置有关的类：</p>
<h4 id="Import注解"><a href="#Import注解" class="headerlink" title="@Import注解"></a>@Import注解</h4><p>首先让我们来看一下该注解类的源码及其注释：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@link</span> Configuration&#125;, &#123;<span class="doctag">@link</span> ImportSelector&#125;, &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125;</div><div class="line">	 * or regular component classes to import.</div><div class="line">	 */</div><div class="line">	Class&lt;?&gt;[] value();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该注解只有一个方法，即类类型的数组。从方法的说明可以看出，该注解可以用来导入类，分别如下：<br>1.导入<code>配置类</code>。<br>2.导入<code>ImportSelector</code>接口实现类。<br>3.导入<code>ImportBeanDefinitionRegistrar</code>接口实现类。<br>4.导入常规的类。</p>
<p>具体什么意思呢？其实就是说，使用该注解导入的类可以自动生成一个bean并纳入spring容器中管理起来，如果导入的类是一个配置类，那么会将该配置类中的所有bean一并都纳入spring容器中管理起来。</p>
<h3 id="ImportSelector接口"><a href="#ImportSelector接口" class="headerlink" title="ImportSelector接口"></a>ImportSelector接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Select and return the names of which class(es) should be imported based on</div><div class="line">	 * the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class="doctag">@link</span> Configuration&#125; class.</div><div class="line">	 */</div><div class="line">	String[] selectImports(AnnotationMetadata importingClassMetadata);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过<code>@Import</code>注解导入<code>ImportSelector</code>接口实现类，将<code>selectImports</code>方法返回的类的全路径指定的 bean纳入到spring容器中进行管理起来，详细可以参考<code>@EnableAutoConfiguration</code>源码，也可以参考<a href="http://www.51stick.com/2017/03/25/springboot-auto-configuration-principle/" title="springboot自动配置原理" target="_blank" rel="external">springboot自动配置原理</a>。</p>
<h3 id="ImportBeanDefinitionRegistrar接口"><a href="#ImportBeanDefinitionRegistrar接口" class="headerlink" title="ImportBeanDefinitionRegistrar接口"></a>ImportBeanDefinitionRegistrar接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Register bean definitions as necessary based on the given annotation metadata of</div><div class="line">	 * the importing &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</div><div class="line">	 * &lt;p&gt;Note that &#123;<span class="doctag">@link</span> BeanDefinitionRegistryPostProcessor&#125; types may &lt;em&gt;not&lt;/em&gt; be</div><div class="line">	 * registered here, due to lifecycle constraints related to &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;</div><div class="line">	 * class processing.</div><div class="line">	 * <span class="doctag">@param</span> importingClassMetadata annotation metadata of the importing class</div><div class="line">	 * <span class="doctag">@param</span> registry current bean definition registry</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ImportBeanDefinitionRegistrar</code>接口的作用是说，当使用<code>@Import</code>注解导入该类的实现类时，可以从方法<code>registerBeanDefinitions</code>的<code>AnnotationMetadata</code>参数获取注解的元数据信息，然后通过参数<code>BeanDefinitionRegistry</code>向spring容器中动态的注入bean。</p>
<p><code>总结：</code><br>在springboot中，自动配置的实现说到底就是通过<code>@Import</code>注解与<code>ImportSelector</code>接口实现类的组合来实现的。或则是<code>@Import</code>注解与<code>ImportBeanDefinitionRegistrar</code>接口实现类的组合来实现自动配置的。</p>
<h3 id="自己写一个自动配置注解"><a href="#自己写一个自动配置注解" class="headerlink" title="自己写一个自动配置注解"></a>自己写一个自动配置注解</h3><p>springboot的自动配置底层实现原理也讲完了，下面自己动手来写一个配置注解。<br>我们下一个EnableLog注解，该注解带有一个<code>package</code>属性，用来指定类的包路径，在指定包路径中的类实例化时，输出实例化信息。</p>
<h4 id="创建-EnableLog注解"><a href="#创建-EnableLog注解" class="headerlink" title="创建@EnableLog注解"></a>创建@EnableLog注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Import</span>(LogImportBeanDefinitionRegistrar.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableLog &#123;</div><div class="line">    String[] packages();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过使用该注解来指定，输出哪些包中的类实例化时的日志信息。</p>
<h4 id="LogImportBeanDefinitionRegistrar"><a href="#LogImportBeanDefinitionRegistrar" class="headerlink" title="LogImportBeanDefinitionRegistrar"></a>LogImportBeanDefinitionRegistrar</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</div><div class="line"></div><div class="line">        Map&lt;String, Object&gt; attr = importingClassMetadata.getAnnotationAttributes(EnableLog.class.getName());</div><div class="line">        String[] packArr = (String[]) attr.get(<span class="string">"packages"</span>);</div><div class="line">        List&lt;String&gt; packages = Arrays.asList(packArr);</div><div class="line">        System.out.println(<span class="string">"packages : "</span> + packages);</div><div class="line"></div><div class="line">        BeanDefinitionBuilder bdb = BeanDefinitionBuilder.rootBeanDefinition(LogBeanPostProcessor.class);</div><div class="line">        bdb.addPropertyValue(<span class="string">"packages"</span>, packages);</div><div class="line"></div><div class="line">        registry.registerBeanDefinition(LogBeanPostProcessor.class.getName(), bdb.getBeanDefinition());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类实现了<code>ImportBeanDefinitionRegistrar</code>接口，用来获取<code>@EnableLog</code>注解的元数据值，并动态的向spring容器中注入<code>LogBeanPostProcessor</code>类的实例以及将注解的元数据值设置到动态注入的bean中。</p>
<h4 id="LogBeanPostProcessor"><a href="#LogBeanPostProcessor" class="headerlink" title="LogBeanPostProcessor"></a>LogBeanPostProcessor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 包名</span></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; packages;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">for</span> (String pack : packages) &#123;</div><div class="line">            <span class="keyword">if</span> (bean.getClass().getName().startsWith(pack)) &#123;</div><div class="line">                System.out.println(<span class="string">"echo bean : "</span> + bean.getClass().getName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> packages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPackages</span><span class="params">(List&lt;String&gt; packages)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.packages = packages;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类实现了<code>BeanPostProcessor</code>接口，目的在于bean实例化时，判断bean所在的类的包名是否是<code>@EnableLog</code>指定的包名，如果是，那么就输出该类的全路径名。</p>
<h4 id="EnableLog注解测试程序"><a href="#EnableLog注解测试程序" class="headerlink" title="@EnableLog注解测试程序"></a>@EnableLog注解测试程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEcho</span>(packages = &#123;<span class="string">"com.springboot.bean"</span>, <span class="string">"com.springboot.vo"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ConfigurableApplicationContext context = SpringApplication.run(App2.class, args);</div><div class="line">        context.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面是<code>@EnableLog</code>的测试代码，在springboot启动时，会将指定的两个包下将要实例化的类名的全路径打印出来。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后我们在来总结一下springboot的自动配置的步骤。</p>
<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>使用<code>@Import</code>注解和<code>ImportSelector</code>接口实现类完成自动配置，将ImportSelector接口中selectImports方法返回的类实例化并纳入到spring容器中管理起来。</p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>使用<code>@Import</code>注解和<code>ImportBeanDefinitionRegistrar</code>接口实现类完成自动配置，在ImportBeanDefinitionRegistrar接口的实现类中动态的向spring容器中注入实例并管理起来。</p>
<p>当然实际中的动态配置远比该示例复杂，其中还涉及到了springboot中按条件装配的内容。这些内容与<code>Condition</code>接口有关，后面有时间再来专门介绍。</p>
]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot自动配置原理]]></title>
      <url>/2017/03/25/springboot-auto-configuration-principle/</url>
      <content type="html"><![CDATA[<p>了解过springboot的朋友都知道，springboot是建立在spring的基础之上，并且springboot最大的好处就是减少了开发的配置，这也是springboot最大的特点，也正是因为这个特点使得springboot中很多组件可以做到开箱即用。本文将要探索的就是springboot自动配置的原理。<br><a id="more"></a></p>
<h3 id="springboot程序入口"><a href="#springboot程序入口" class="headerlink" title="springboot程序入口"></a>springboot程序入口</h3><p>当我们就开始一个spingboot程序时，往往看到的是如下的入口程序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ConfigurableApplicationContext context = SpringApplication.run(App.class, args);</div><div class="line">        context.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是<code>springboot</code>程序的入口代码，只需使用<code>@SpringBootApplication</code>我们就已经开启了springboot的自动配置功能，这也是springboot帮我们默认就配置好了。那么这段代码中，springboot为就已具备了自动配置功能呢？这段代码没有什么特别的，所以关键在于<code>@SpringBootApplication</code>注解，所以下面我们在来看看<code>@SpringBootApplication</code>的源码。</p>
<h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>首先，我们来看看该注解的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@SpringBootConfiguration</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@ComponentScan</span>(excludeFilters = <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class))</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</div><div class="line"></div><div class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="meta">@AliasFor</span>(annotation = ComponentScan.class, attribute = <span class="string">"basePackages"</span>)</div><div class="line">	String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="meta">@AliasFor</span>(annotation = ComponentScan.class, attribute = <span class="string">"basePackageClasses"</span>)</div><div class="line">	Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>@SpringBootApplication</code>注解源码中，我们可以看到一个<code>@EnableAutoConfiguration</code>注解，顾名思义叫”启用自动配置”。所以看到这，可以知道，sprinboot的自动配置功能就是依赖于该注解。因此在springboot的入口程序，也可以直接使用<code>@EnableAutoConfiguration</code>来启用springboot的自动配置功能。其实在早期的springboot版本中并没有<code>@SpringBootApplication</code>注解，因此早期版本必须使用<code>@EnableAutoConfiguration</code>注解显示开启springboot的自动配置功能，只是后面的springboot版本中引入了<code>@SpringBootApplication</code>注解，在该注解中集成了<code>@EnableAutoConfiguration</code>以及其他默认开启的功能，也就是说它帮我们整合了自动配置的功能。</p>
<h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>下面我们在来看看<code>@EnableAutoConfiguration</code>注解的源码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@AutoConfigurationPackage</span></div><div class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</div><div class="line"></div><div class="line">   String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</div><div class="line"></div><div class="line">   Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">   String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ENABLED_OVERRIDE_PROPERTY = “spring.boot.enableautoconfiguration”：表示通过properties配置项指定是否开启自动配置功能，默认是true开启。</p>
<p>在<code>@EnableAutoConfiguration</code>的源码中我们可以看到，这里使用了<code>@Import</code>注解，并且导入了类<code>EnableAutoConfigurationImportSelector.class</code>，其实springboot自动配置的神奇魔力也在这。</p>
<h3 id="EnableAutoConfigurationImportSelector"><a href="#EnableAutoConfigurationImportSelector" class="headerlink" title="EnableAutoConfigurationImportSelector"></a>EnableAutoConfigurationImportSelector</h3><p>下面我们来看看该类的源码，看看它是如何实现自动配置的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableAutoConfigurationImportSelector</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">DeferredImportSelector</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">ResourceLoaderAware</span>,</div><div class="line">		<span class="title">BeanFactoryAware</span>, <span class="title">EnvironmentAware</span>, <span class="title">Ordered</span> &#123;</div><div class="line">  </div><div class="line">  ...</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;</div><div class="line">		<span class="keyword">if</span> (!isEnabled(metadata)) &#123;</div><div class="line">			<span class="keyword">return</span> NO_IMPORTS;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			AnnotationAttributes attributes = getAttributes(metadata);</div><div class="line">			List&lt;String&gt; configurations = getCandidateConfigurations(metadata,</div><div class="line">					attributes);</div><div class="line">			configurations = removeDuplicates(configurations);</div><div class="line">			Set&lt;String&gt; exclusions = getExclusions(metadata, attributes);</div><div class="line">			configurations.removeAll(exclusions);</div><div class="line">			configurations = sort(configurations);</div><div class="line">			recordWithConditionEvaluationReport(configurations, exclusions);</div><div class="line">			<span class="keyword">return</span> configurations.toArray(<span class="keyword">new</span> String[configurations.size()]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (getClass().equals(EnableAutoConfigurationImportSelector.class)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.environment.getProperty(</div><div class="line">					EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class,</div><div class="line">					<span class="keyword">true</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">  ...  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码这里我们省略其他方法，只保留两个关键的方法。</p>
<p>1.isEnabled方法：这里会判断<code>@EnableAutoConfiguration</code>注解中的<code>EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY</code>属性，即前面说的<code>spring.boot.enableautoconfiguration</code>属性，从这里也看以看出，如果没有配置该属性，默认自动配置功能是开启的。</p>
<p>2.selectImports方法：该方法是来自于<code>ImportSelector</code>接口，<code>EnableAutoConfigurationImportSelector</code>类实现了<code>DeferredImportSelector</code>接口，而<code>DeferredImportSelector</code>接口又继承与<code>ImportSelector</code>接口。下面我们再来看看<code>ImportSelector</code>接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Select and return the names of which class(es) should be imported based on</div><div class="line">	 * the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class="doctag">@link</span> Configuration&#125; class.</div><div class="line">	 */</div><div class="line">	String[] selectImports(AnnotationMetadata importingClassMetadata);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该接口返回的是一个字符串数组，其值是类的全路径名称，也就是说，返回的数组中的类的全路径所指定的类，最后会被实例化成bean，并且被纳入spring容器所管理起来。</p>
<p>在<code>EnableAutoConfigurationImportSelector</code>类中实现了<code>ImportSelector</code>接口中的selectImports方法，最终将要自动配置的bean的全路径名以字符串数组返回，然后被spring容器管理起来。这里也就达到了自动配置的功能。那么该实现方法是如何找到并返回要自动加载的bean的类的呢？下面我们在来具体看看<code>selectImports</code>方法的实现代码。</p>
<h3 id="SpringFactoriesLoader类"><a href="#SpringFactoriesLoader类" class="headerlink" title="SpringFactoriesLoader类"></a>SpringFactoriesLoader类</h3><p>在<code>selectImports</code>方法中有这样一句代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; configurations = getCandidateConfigurations(metadata, attributes);</div></pre></td></tr></table></figure>
<p>这里返回的就是需要自动装配的bean的全路径名的字符串数组，然后我们在来看看<code>getCandidateConfigurations</code>方法的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span></span></div><div class="line">			AnnotationAttributes attributes) &#123;</div><div class="line">		List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</div><div class="line">				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</div><div class="line">		Assert.notEmpty(configurations,</div><div class="line">				<span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></div><div class="line">						+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</div><div class="line">		<span class="keyword">return</span> configurations;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码以及断言提示中可以看到，这里会通过<code>SpringFactoriesLoader</code>类的<code>loadFactoryNames</code>方法在<code>classpath</code>路径下的<code>META-INF</code>文件夹下去找一个叫<code>spring.factories</code>的文件。然后把该文件中以<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>作为键的配置项的值返回，其实这个配置文件中<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>配置项的值，就是需要springboot自动装配的bean的类全路径名称。我们可以看看springboot的自动配置组件<code>spring-boot-autoconfigure</code>下的组织结构：</p>
<p><img src="http://i2.buimg.com/1949/1eefc0cfd5b0690f.png" alt="Markdown"></p>
<p>从图中，我们可以看到，这里配置了很多需要自动配置的bean的类的全路径名称。这些就是springboot在启动时默认会装配的bean。<br>因此，<code>SpringFactoriesLoader.loadFactoryNames</code>方法会查找classpath路径下所有<code>META-INF/spring.factories</code>文件中对应的<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>配置项的值，并返回。</p>
<h3 id="自动配置总结"><a href="#自动配置总结" class="headerlink" title="自动配置总结"></a>自动配置总结</h3><p>到这里，springboot自动配置的过程也就是分析完了，下面我们总结一下：<br>1.<code>@SpringBootApplication</code>集成<code>@EnableAutoConfiguration</code>。<br>2.<code>@EnableAutoConfiguration</code>导入了<code>EnableAutoConfigurationImportSelector.class</code>。<br>3.<code>EnableAutoConfigurationImportSelector</code>最终实现了<code>ImportSelector</code>接口的<code>selectImports</code>方法。<br>4.<code>ImportSelector</code>接口的<code>selectImports</code>中，通过<code>SpringFactoriesLoader</code>类的<code>loadFactoryNames</code>方法，加载classpath下所有<code>META-INF/spring.factories</code>文件中的<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>配置的类的全路径名。<br>5.将<code>ImportSelector</code>接口的<code>selectImports</code>返回的全路径名对应的类纳入spring容器管理。</p>
<p>到此，springboot的自动配置也就分析完了。</p>
]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot的日志配置]]></title>
      <url>/2017/03/19/springboot-log/</url>
      <content type="html"><![CDATA[<p>本文将要介绍的是springboot中日志组件的相关配置，springboot默认使用的是logback日志框架，同时本文也会简单介绍在springboot如何配置并使用其他的日志框架，log4j2。<br><a id="more"></a></p>
<h3 id="springboot默认日志框架是logback"><a href="#springboot默认日志框架是logback" class="headerlink" title="springboot默认日志框架是logback"></a>springboot默认日志框架是logback</h3><p>正如文章开头所说，springboot中默认使用的日志组件为<code>logback</code>，那么它是怎样引入的logback呢?</p>
<p>在使用springboot时，我们会引入如下的maven配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在<code>spring-boot-starter</code>中又引入了如下的日志配置组件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	......</div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	......</div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>而在<code>spring-boot-starter-logging</code>中，正式引入了<code>logback</code>的配置，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后根据maven的配置依赖关系我们可以知道，springboot在引入启动的基础依赖包中就导入了logbak的组件。</p>
<h3 id="logbak的配置方式"><a href="#logbak的配置方式" class="headerlink" title="logbak的配置方式"></a>logbak的配置方式</h3><h4 id="在application-properties中配置"><a href="#在application-properties中配置" class="headerlink" title="在application.properties中配置"></a>在application.properties中配置</h4><p>在springboot中，我们可以直接在<code>application.properties</code>配置文件中配置<code>logback</code>日志组件的相关属性，这种方式简单粗暴，但是实践中不会这么干。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">logging.level.com.springboot.learn.service=debug</div><div class="line"></div><div class="line">logging.file=e:/tmp/my.log</div><div class="line"></div><div class="line">logging.pattern.console=%-20(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread]) %-5level %logger&#123;80&#125; - %msg%n</div><div class="line"></div><div class="line">logging.file.console=%-20(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread]) %-5level %logger&#123;80&#125; - %msg%n</div></pre></td></tr></table></figure>
<p><code>说明：</code><br>1.logging.level.xxx：该配置项指定日志的输出级别。如果xxx=root，表示所有日志的输出级别；如果xxx=package|class，表示指定该package或则class日志级别，日志级别有：<code>TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</code>。</p>
<p>2.logging.file:指定日志文件输出的路径和文件名。</p>
<p>3.logging.pattern.console：表示控制台日志文件的输出格式。</p>
<p>4.logging.file.console：表示日志文件输出的日志格式。</p>
<h4 id="在日志配置文件中配置日志"><a href="#在日志配置文件中配置日志" class="headerlink" title="在日志配置文件中配置日志"></a>在日志配置文件中配置日志</h4><p>默认情况下，springboot加载classpath下的<code>logback.xml</code>或<code>logback-spring.xml</code>文件。但是官方推荐使用<code>logback-spring.xml</code>命名<code>logback</code>的日志配置文件名，下面我们简单看看看如何配置。</p>
<p>在classpath下添加如下<code>logback-spring.xml</code>配置文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-20(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread]) %-5level %logger&#123;80&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如上，在<code>logback-spring.xml</code>简单的配置了控制台的日志输入格式。</p>
<h3 id="使用其他日志组件"><a href="#使用其他日志组件" class="headerlink" title="使用其他日志组件"></a>使用其他日志组件</h3><p>如果不想用默认的logback日志组件，我们也可以使用其他的日志组件，配置步骤如下：</p>
<h4 id="排除默认日志依赖组件"><a href="#排除默认日志依赖组件" class="headerlink" title="排除默认日志依赖组件"></a>排除默认日志依赖组件</h4><p>从<code>spring-boot-starter</code>中排除默认加载的日志组件<code>spring-boot-starter-logging</code>，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引入需要的日志依赖"><a href="#引入需要的日志依赖" class="headerlink" title="引入需要的日志依赖"></a>引入需要的日志依赖</h4><p>在排除默认日志依赖后，需要重新加入将要使用的日志依赖，此处加入的<code>log4j2</code>的依赖，重新引入依赖后的pom配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="在classpath下加入相应的配置文件"><a href="#在classpath下加入相应的配置文件" class="headerlink" title="在classpath下加入相应的配置文件"></a>在classpath下加入相应的配置文件</h4><p>在完成了上述两个步骤后，最后我们需要在classpath下加入相应的配置文件。<br>这里我们加入一个简单的log4j2的日志配置文件<code>log4j2-spring.xml</code>,内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span> <span class="attr">follow</span>=<span class="string">"true"</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;80&#125; - %msg%n"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span>   </div><div class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>到此，springboot中关于日志的使用部分就介绍完了。</p>
]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot中profiles配置及使用]]></title>
      <url>/2017/03/17/springboot-configruation-profiles/</url>
      <content type="html"><![CDATA[<p>在实际工作中，往往会面临一个问题，那就是多环境配置问题，分别是开发环境，测试环境，生产环境。本文要介绍的就是springboot中的profiles的使用，指定不同环境的配置等实践问题。<br><a id="more"></a></p>
<h3 id="profiles的配置方式"><a href="#profiles的配置方式" class="headerlink" title="profiles的配置方式"></a>profiles的配置方式</h3><p>在springboot启动的时候，有两种指定profiles的方式，分别是启动参数指定和编程式指定，下面来详细介绍一下。</p>
<p>首先准备本文中需要使用到的配置文件。</p>
<p>１.application.properties配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jdbc.username = user name</div><div class="line">jdbc.password = password</div></pre></td></tr></table></figure>
<p>2.application-default.properties配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jdbc.username = defaultuser name</div><div class="line">jdbc.password = default password</div></pre></td></tr></table></figure>
<p>3.application-dev.properties配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jdbc.username = dev user name</div><div class="line">jdbc.password = dev password</div></pre></td></tr></table></figure></p>
<p>4.application-test.properties配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc.username = test user name</div></pre></td></tr></table></figure></p>
<h4 id="正常情况下配置项的使用情况"><a href="#正常情况下配置项的使用情况" class="headerlink" title="正常情况下配置项的使用情况"></a>正常情况下配置项的使用情况</h4><p>springboot启动入口类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    	</div><div class="line">    	ConfigurableApplicationContext context = SpringApplication.run(App.class, args);</div><div class="line">    	</div><div class="line">    	System.out.println(context.getEnvironment().getProperty(<span class="string">"jdbc.username"</span>));</div><div class="line">    	System.out.println(context.getEnvironment().getProperty(<span class="string">"jdbc.password"</span>));</div><div class="line"></div><div class="line">    	context.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启用springboot程序，运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">default user name</div><div class="line">default password</div></pre></td></tr></table></figure>
<p>由此我们可以看出，正常情况下，在配置项使用的优先级上<code>application-default.properties</code>比<code>application.properties</code>高。</p>
<p>下面我们来看看如何在spingboot中使用profiles来控制配置文件的使用。</p>
<h3 id="springbot中profiles的启用方式"><a href="#springbot中profiles的启用方式" class="headerlink" title="springbot中profiles的启用方式"></a>springbot中profiles的启用方式</h3><h4 id="在启动参数中配置profiles"><a href="#在启动参数中配置profiles" class="headerlink" title="在启动参数中配置profiles"></a>在启动参数中配置profiles</h4><p>在启动参数中配置<code>--spring.profiles.active</code>参数项指定profiles，如图：</p>
<p><img src="http://p1.bqimg.com/1949/552dcb53f1260a26.png" alt=""></p>
<p>在运行上述主程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    	</div><div class="line">    	ConfigurableApplicationContext context = SpringApplication.run(App.class, args);</div><div class="line">    	</div><div class="line">    	System.out.println(context.getEnvironment().getProperty(<span class="string">"jdbc.username"</span>));</div><div class="line">    	System.out.println(context.getEnvironment().getProperty(<span class="string">"jdbc.password"</span>));</div><div class="line"></div><div class="line">    	context.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">test user name</div><div class="line">password</div></pre></td></tr></table></figure>
<p>通过结果，我们发现，username使用的是<code>application-test.properties</code>中的配置项，而password由于在<code>application-test.properties</code>中由于没有配置，则使用的是<code>application.properties</code>中的配置项。那么需要注意的问题来了，文章开头不是说<code>application-default.properties</code>比<code>application.properties</code>配置项的优先级高么？为什么这里用的是后者的配置项，而不是前者<code>application-default.properties</code>的配置项？其实，原因是，在指定了<code>profiles</code>的情况下，<code>application-default.properties</code>文件不会被springboot加载，因此，这里使用的是<code>application.properties</code>中的password的配置。所以这是我们需要注意的一个小细节的地方。</p>
<h4 id="在程序中配置profiles"><a href="#在程序中配置profiles" class="headerlink" title="在程序中配置profiles"></a>在程序中配置profiles</h4><p>稍微改动一点启动的主程序代码，然后在主程序中配置profiles，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    	</div><div class="line">    	SpringApplication app = <span class="keyword">new</span> SpringApplication(App.class);</div><div class="line"></div><div class="line">		<span class="comment">// 指定profiles</span></div><div class="line">    	app.setAdditionalProfiles(<span class="string">"dev"</span>);</div><div class="line"></div><div class="line">    	ConfigurableApplicationContext context = app.run(args);</div><div class="line">		</div><div class="line">    	System.out.println(context.getEnvironment().getProperty(<span class="string">"jdbc.username"</span>));</div><div class="line">    	System.out.println(context.getEnvironment().getProperty(<span class="string">"jdbc.password"</span>));</div><div class="line"></div><div class="line">    	context.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dev user name</div><div class="line">dev password</div></pre></td></tr></table></figure>
<p>从运行结果我们可以看到，这里使用的是<code>application-dev.properties</code>配置文件中的配置项。</p>
<p><code>总结：</code><br>1.在没有设置<code>profiles</code>时，<code>application-default.properties</code>和<code>application.properties</code>都会被springboot加载，且<code>application-default.properties</code>配置的优先级高于<code>application.properties</code>。<br>2.如果设置了<code>profiles</code>，会首先在<code>profiles</code>指定的配置文件中查找需要的配置项。但是由于在这种情况下，<code>application-default.properties</code>不会被springboot加载，如果有没有找到的相关配置项，那么之后会去<code>application.properties</code>配置文件中继续去查找相关的配置项并启动该配置项。</p>
<h3 id="使用-Profile注解"><a href="#使用-Profile注解" class="headerlink" title="使用@Profile注解"></a>使用@Profile注解</h3><p>上面讲了<code>profiles</code>指定配置文件使用的情况，在程序中，我们也可以使用<code>@Profile</code>注解来根据<code>profiles</code>启动相关的bean。如：</p>
<p>有如下配置类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Runnable <span class="title">createRunnable</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"===== normal ====="</span>);</div><div class="line">		<span class="keyword">return</span> () -&gt; &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@Profile</span>(<span class="string">"test"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Runnable <span class="title">createRunnableTest</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"===== test ====="</span>);</div><div class="line">		<span class="keyword">return</span> () -&gt; &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@Profile</span>(<span class="string">"dev"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Runnable <span class="title">createRunnableDev</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"===== dev ====="</span>);</div><div class="line">		<span class="keyword">return</span> () -&gt; &#123;&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主程序如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    	SpringApplication app = <span class="keyword">new</span> SpringApplication(App.class);</div><div class="line"></div><div class="line">		<span class="comment">//编程的方式指定生效的profile</span></div><div class="line">    	app.setAdditionalProfiles(<span class="string">"dev"</span>);</div><div class="line"></div><div class="line">    	ConfigurableApplicationContext context = app.run(args);</div><div class="line"></div><div class="line">		context.getBean(MyConfiguration.class);</div><div class="line"></div><div class="line">		context.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动程序，运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">===== normal =====</div><div class="line">===== dev =====</div></pre></td></tr></table></figure>
<p>1.从结果我们可以看到，<code>@Profile(&quot;test&quot;)</code>指定的bean没有被spring容器初始化。也就是说，在配置类中，没有指定<code>@Profile</code>注解的创建bean的方法默认也会被spring容器初始化，同时对应的<code>profiles</code>的<code>@Profile(&quot;dev&quot;)</code>也会被实例化并纳入spring容器进行管理，而其他与指定<code>profiles</code>不匹配的<code>@Profile</code>的bean则不会被实例化。</p>
<p>2.其实<code>@Profile</code>也可以注解在配置类上，表示只有与<code>profiles</code>吻合时，<code>@Profile</code>注解的配置类中的<code>@Bean</code>才会被spring初始化并纳入spring容器中管理起来。</p>
]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot 配置详解]]></title>
      <url>/2017/03/12/springboot-configuration-load/</url>
      <content type="html"><![CDATA[<p>本文主要探索springboot中配置文件加载的几种方式，以及有哪些方式可以从springboot配置文件中获取配置项。最后总结了在获取配置文件配置项时，如果有相同配置项，那么这些具有相同的配置项，最终到底使用那种方式加载的配置文件中的内容，即配置文件配置项使用的优先既关系。<br><a id="more"></a></p>
<h3 id="默认配置文件名"><a href="#默认配置文件名" class="headerlink" title="默认配置文件名"></a>默认配置文件名</h3><p>springboot中默认的配置文件名如下：</p>
<ol>
<li>application.properties，application-default.properties</li>
<li>application.yml，application-default.yml</li>
</ol>
<h3 id="默认配置文件路径"><a href="#默认配置文件路径" class="headerlink" title="默认配置文件路径"></a>默认配置文件路径</h3><ol>
<li>classpath 根目录</li>
<li>classpath:/config</li>
</ol>
<h3 id="自定义配置文件加载"><a href="#自定义配置文件加载" class="headerlink" title="自定义配置文件加载"></a>自定义配置文件加载</h3><h4 id="程序启动参数中指定配置文件"><a href="#程序启动参数中指定配置文件" class="headerlink" title="程序启动参数中指定配置文件"></a>程序启动参数中指定配置文件</h4><p>使用程序启动参数加载配置文件有两种方式，一种是加载类路径配置文件，另一种是加载文件系统配置文件</p>
<p>1.在启动参数中使用<code>--spring.config.name</code>加载自定义配置文件，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--spring.config.name=jdbc</div></pre></td></tr></table></figure>
<p><code>提示：</code><br>    <code>jdbc</code>可以是<code>jdbc.properties</code>或<code>jdbc.yml</code>，</p>
<p>2.在启动参数中使用<code>--spring.config.location</code>加载自定义配置文件，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--spring.config.location=classpath:jdbc.yml,file:D:/jdbc2.properties</div></pre></td></tr></table></figure>
<p><img src="http://p1.bpimg.com/1949/7b4b77134a5b9518.png" alt=""></p>
<p><code>提示:</code></p>
<p>a) 使用这种方式加载配置文件，必须指定配置文件的全路径名。<br>b) 这种方式可以指指定多个配置文件，使用<code>逗号</code>分隔。</p>
<h4 id="使用spring注解加载配置文件"><a href="#使用spring注解加载配置文件" class="headerlink" title="使用spring注解加载配置文件"></a>使用spring注解加载配置文件</h4><p>1.使用<code>@PropertySource</code>加载自定义配置文件，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:application.properties"</span>)</div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"file:/e:/tmp/application2.properties"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConfigLoad</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>提示:</code></p>
<p>a) 使用<code>@PropertySource</code>可以同时加载<code>类路径(classpath:)</code>和<code>系统文件路径（file:）</code>配置文件。<br>b) 使用此注解如果要在配置类中加载多个配置文件，只须注解多次即可。</p>
<p>2.使用<code>@PropertySources</code>加载自定义配置文件，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySources</span>(&#123;</div><div class="line">        <span class="meta">@PropertySource</span>(<span class="string">"classpath:application2.properties"</span>),</div><div class="line">        <span class="meta">@PropertySource</span>(<span class="string">"file:/e:/tmp/application2.properties"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConfigLoad</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>提示:</code></p>
<p>a) 使用<code>@PropertySources</code>和使用<code>@PropertySource</code>效果一样。</p>
<h4 id="使用EnvironmentPostProcessor实现类加载配置文件"><a href="#使用EnvironmentPostProcessor实现类加载配置文件" class="headerlink" title="使用EnvironmentPostProcessor实现类加载配置文件"></a>使用<code>EnvironmentPostProcessor</code>实现类加载配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.springboo.learn;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.env.EnvironmentPostProcessor;</div><div class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;</div><div class="line"><span class="keyword">import</span> org.springframework.core.env.PropertiesPropertySource;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CunstomEnvironmentPostProcessor</span> <span class="keyword">implements</span> <span class="title">EnvironmentPostProcessor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessEnvironment</span><span class="params">(ConfigurableEnvironment environment, SpringApplication application)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> (InputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">"D:/application.properties"</span>)) &#123;</div><div class="line">            Properties source = <span class="keyword">new</span> Properties();</div><div class="line">            source.load(input);</div><div class="line">            PropertiesPropertySource propertySource = <span class="keyword">new</span> PropertiesPropertySource(<span class="string">"my"</span>, source);</div><div class="line">            environment.getPropertySources().addLast(propertySource);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意:</code></p>
<p>a) 使用这种方式必在<code>META-INF/spring.factories</code>中以键值对的形式指定该类，源码是这样说的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;</div><div class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Allows for customization of the application's &#123;<span class="doctag">@link</span> Environment&#125; prior to the</div><div class="line"> * application context being refreshed.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * EnvironmentPostProcessor implementations have to be registered in</div><div class="line"> * &#123;<span class="doctag">@code</span> META-INF/spring.factories&#125;, using the fully qualified name of this class as the</div><div class="line"> * key.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * &#123;<span class="doctag">@code</span> EnvironmentPostProcessor&#125; processors are encouraged to detect whether Spring's</div><div class="line"> * &#123;<span class="doctag">@link</span> org.springframework.core.Ordered Ordered&#125; interface has been implemented or if</div><div class="line"> * the @&#123;<span class="doctag">@link</span> org.springframework.core.annotation.Order Order&#125; annotation is present and</div><div class="line"> * to sort instances accordingly if so prior to invocation.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Andy Wilkinson</div><div class="line"> * <span class="doctag">@author</span> Stephane Nicoll</div><div class="line"> * <span class="doctag">@since</span> 1.3.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnvironmentPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Post-process the given &#123;<span class="doctag">@code</span> environment&#125;.</div><div class="line">	 * <span class="doctag">@param</span> environment the environment to post-process</div><div class="line">	 * <span class="doctag">@param</span> application the application to which the environment belongs</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessEnvironment</span><span class="params">(ConfigurableEnvironment environment, SpringApplication application)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所我们在<code>META-INF/spring.factories</code>中作如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.springframework.boot.env.EnvironmentPostProcessor=com.springboo.learn.CunstomEnvironmentPostProcessor</div></pre></td></tr></table></figure>
<p>这样，就可以在springboot启动的时候，去读取上述示例中的<code>D:/application.properties</code>文件。</p>
<p>b) 与<code>@PropertySource</code>和<code>@PropertySources</code>不同的是，使用此种方式，不仅可以加载文件路径中的配置文件，也可以加载并读取远程配置中心的配置文件。原理从上述示例中可以看出，该方式是在启动的时候，动态的向spring容器中注册配置文件中的配置项。</p>
<h3 id="如何获取配置项"><a href="#如何获取配置项" class="headerlink" title="如何获取配置项"></a>如何获取配置项</h3><p>假如有一个配置文件叫<code>application.properties</code>，其配置内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">local.port=8080</div><div class="line"></div><div class="line">local.hosts[0]=192.168.1.101</div><div class="line">local.hosts[1]=192.168.1.102</div><div class="line">local.hosts[2]=192.168.1.103</div></pre></td></tr></table></figure>
<h4 id="使用注解获取配置项"><a href="#使用注解获取配置项" class="headerlink" title="使用注解获取配置项"></a>使用注解获取配置项</h4><p>使用<code>@Vaule</code>注解获取spring配置项，这也是项目中使用最多的方式，如：</p>
<p>在类中的获取方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;local.port:8080&#125;"</span>)</div><div class="line"><span class="keyword">private</span> Integer port;</div></pre></td></tr></table></figure>
<p><code>注意：</code><br>1.该种方式不用写<code>setter</code>和<code>getter</code>方法，且spring会自动适配配置项的数据类型。<br>2.上述示例中的<code>local.port:8080</code>表示，如果没有获取到配置文件各种的配置(不指定默认配置项会报异常)，则使用默认的8080端口。</p>
<h4 id="使用spring环境变量对象获取配置项"><a href="#使用spring环境变量对象获取配置项" class="headerlink" title="使用spring环境变量对象获取配置项"></a>使用spring环境变量对象获取配置项</h4><p>除了上述方式外，在springboot中还可以使用spring核心包中的<code>Environment</code>对象来获取配置文件中的未配置项，如：</p>
<p>在类中的获取方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Environment env;</div><div class="line"></div><div class="line">String ip = env.getProperty(<span class="string">"local.port"</span>, Integer.class)</div></pre></td></tr></table></figure>
<p><code>注意:</code><br>这种方式如可以显示的指定配置文件的数据类型，并且，如果配置文件中没有指定的配置项也不会报错，只是获取的配置内容为<code>null</code>。</p>
<p>以上两种方式是spring中获取配置文件通过的方法。下面介绍的方式是springboot中获取配置的特性方式。</p>
<h4 id="使用-ConfigurationProperties获取配置项"><a href="#使用-ConfigurationProperties获取配置项" class="headerlink" title="使用@ConfigurationProperties获取配置项"></a>使用@ConfigurationProperties获取配置项</h4><p>依然使用上述的<code>application.properties</code>文件为例，在类中可以这样获取：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"local"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationPropertiesTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> List&lt;String&gt; hosts;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Integer port;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHosts</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> hosts;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHosts</span><span class="params">(List&lt;String&gt; hosts)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.hosts = hosts;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getPort</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> port;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(Integer port)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.port = port;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>上述方法只要配置项前缀一样，就可以在类中简化获取配置的代码。<br>使用<code>@ConfigurationProperties</code>除了作用在类的申明上，也可以直接商用在配置类<code>bean</code>的创建方法上，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"local"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ConfigurationProperties <span class="title">createConfigurationPropertiesTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationProperties();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此，2中spring通用获取配置项和1中springboot新特性获取配置项的方式就介绍完了。</p>
<h4 id="配置项使用的优先级关系"><a href="#配置项使用的优先级关系" class="headerlink" title="配置项使用的优先级关系"></a>配置项使用的优先级关系</h4><p>开始我们介绍了springboot中配置文件的加载方式，有默认加载<code>classpath</code>中的<code>application.properties</code>等，有自定义加载<code>classpath</code>中的其他配置文件，还有有加载<code>文件系统</code>和<code>远程配置</code>的配置文件。那么此时我们可以思考一个问题，如果这些配置文件中有相同的配置项时，那么最终使用那种配置文件加载方式中的配置项呢？这里我做了一个如下的总结：<br>1.优先使用<code>classpath</code>下默认的<code>application-default.properties</code>文件中的配置项(如果指定了profile，该配置文件不会加载)。<br>2.然后使用<code>classpath</code>下默认的<code>application.properties</code>文件中的配置项。<br>3.其次使用<code>classpath</code>自定义配置文件中的配置项。<br>4.最后使用文件系统和远程配置中的自定义配置项。</p>
<p>以上内容就是关于springboot相关配置加载的相干内容，如有总结得不对的地方还请指正。</p>
]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot 快速入门]]></title>
      <url>/2017/03/11/springboot-learn-introduction/</url>
      <content type="html"><![CDATA[<p>本文主要通过一个简单的项目演示<code>springboot</code>的基本搭建工作，介绍了<code>springboot</code>的基本使用和配置。<br><a id="more"></a></p>
<h3 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h3><ol>
<li>本文使用maven快速构建项目。</li>
<li>springboot官方推荐使用gradle来构建springboot项目。</li>
<li><a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/" target="_blank" rel="external">SpringBoot 1.4.2.RELEASE官文档</a></li>
</ol>
<h3 id="pom依赖配置"><a href="#pom依赖配置" class="headerlink" title="pom依赖配置"></a>pom依赖配置</h3><p>当前的pom.xml内容如下，仅引入了两个模块：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></div><div class="line">		 <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 </span></div><div class="line">		 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springboot.learn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-day01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-day01<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>说明</code>：</p>
<ol>
<li>spring-boot-starter：springboot的核心模块，添加jar包依赖下载springboot的自动配置、日志和YAML等。</li>
<li>spring-boot-starter-web：springboot的web模块。</li>
<li>spring-boot-starter-test：springboot的测试模块，包括JUnit、Hamcrest、Mockito等。</li>
</ol>
<h3 id="项目基本结构"><a href="#项目基本结构" class="headerlink" title="项目基本结构"></a>项目基本结构</h3><p><img src="http://p1.bqimg.com/1949/47e4fbad8450f2e8.png" alt="项目结构"></p>
<p><code>注意：</code></p>
<ol>
<li><code>src/main/java</code>符合maven项目的标准结构，这下面是java源代码。</li>
<li><code>src/main/resources</code>该目录下存放的是java项目的资源文件。本项目中存放的是springboot的默认配置文件<code>application.properties</code></li>
<li><code>src/test/java</code>存放java测试代码。</li>
<li>访问springboot默认启动地址<code>http://localhost:8089/</code>，结果如下</li>
<li><img src="http://p1.bqimg.com/1949/42242d4aa29b8d61.png" alt="运行结果"><br><a href="http://p1.bqimg.com/1949/42242d4aa29b8d61.png" target="_blank" rel="external">http://p1.bqimg.com/1949/42242d4aa29b8d61.png</a><br>该界面是springboot的默认访问界面,到此springboot算是正常启动起来了。</li>
</ol>
<h3 id="编写第一个controller服务类"><a href="#编写第一个controller服务类" class="headerlink" title="编写第一个controller服务类"></a>编写第一个controller服务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.springboot.learn.web;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动主程序，打开浏览器访问<code>http://localhost:8089/hello</code>，可以看到页面输出内容为：Hello World</p>
<h3 id="编写单元测试用例"><a href="#编写单元测试用例" class="headerlink" title="编写单元测试用例"></a>编写单元测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.springboot.learn;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.springboot.learn.web.HelloController;</div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.mock.web.MockServletContext;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.equalTo;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = MockServletContext.class)</div><div class="line"><span class="comment">//@SpringBootTest</span></div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MockMvc mvc;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).accept(MediaType.APPLICATION_JSON))</div><div class="line">           .andExpect(status().isOk())</div><div class="line">           .andExpect(content().string(equalTo(<span class="string">"Hello World"</span>)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>使用<code>MockServletContext</code>来构建一个空的<code>WebApplicationContext</code>，这样我们创建的<code>HelloController</code>就可以在<code>@Before</code>函数中创建并传递到<code>MockMvcBuilders.standaloneSetup（）</code>函数中。</li>
</ol>
<p>到此，通过maven构建springboot基础项目已经完成。</p>
]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[drools drl 规则文件属性介绍]]></title>
      <url>/2017/03/06/drools-rule-file-attribute/</url>
      <content type="html"><![CDATA[<p>本文主要介绍drools规则文件中的相关属性，只有在充分了解规则文件属性含义，使用drools开发时才能得心应手，用得自信，用得放心，开发省心。<br><a id="more"></a></p>
<h3 id="属性概要介绍"><a href="#属性概要介绍" class="headerlink" title="属性概要介绍"></a>属性概要介绍</h3><p><code>规则属性</code>是用来控制规则执行的重要工具，在drools中目前有如下规则属性，分别是：activation-group、agenda-group、<br>auto-focus、date-effective、date-expires、dialect、duration、enabled、lock-on-active、no-loop、ruleflow-group、salience、when，这些属性分别适用于不同的场景，下面我们就来分别介绍这些属性的含义及用法。</p>
<h3 id="属性详细介绍"><a href="#属性详细介绍" class="headerlink" title="属性详细介绍"></a>属性详细介绍</h3><h4 id="salience"><a href="#salience" class="headerlink" title="salience"></a>salience</h4><p>用来设置规则执行的优先级，salience 属性的值是一个整形数字，数字越大表示规则执行的优先级越高。同时它的值可以是一个负数。ssalience 的缺省值为0，如果未设置该属性值，规则的执行顺序是随机的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rule &quot;rule-01&quot;</div><div class="line">    salience 1</div><div class="line">    when</div><div class="line">        $messageFact : Message($status : status == Message.HELLO, $newMessage : message);</div><div class="line">    then</div><div class="line">        System.out.println(&quot;rule-01. Begin to chagne message of fact&quot;);</div><div class="line">end</div></pre></td></tr></table></figure></p>
<h4 id="no-loop"><a href="#no-loop" class="headerlink" title="no-loop"></a>no-loop</h4><p>该属性为布尔类型，可选值为true|false，缺省值是 false。其作用是控制已经执行过的规则当条件再次满足时是否再次执行。因为当规则引擎内部的<code>Working Memory</code>的Fact 更新时会引起引擎再次启动规则检查，并处罚规则的执行。如果no-loop设置为true，那么当规则再次执行时，引擎会忽略掉所有no-loop为true的规则，也就是说，执行过的规则不会因为Fact的更新再次执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rule &quot;rule-01&quot;</div><div class="line">    salience 1</div><div class="line">    no-loop  true</div><div class="line">    when</div><div class="line">        $messageFact : Message($status : status == Message.HELLO, $newMessage : message);</div><div class="line">    then</div><div class="line">        System.out.println(&quot;rule-01. Begin to chagne message of fact&quot;);</div><div class="line">        $messageFact.setMessage(&quot;New message&quot;);</div><div class="line">        update($messageFact)</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p>上述示例，只会执行一次，如果no-loop设置为false，或则不设置该属性，那么该规则会陷入循环执行中，造成规则死循环。</p>
<h4 id="date-effective"><a href="#date-effective" class="headerlink" title="date-effective"></a>date-effective</h4><p>规则执行的有效时间，缺省状态下规则随时都可以执行，如果该属性设置了时间，那么只有当<code>系统时间</code> &gt;= date-effective设置的时间时才会执行。默认情况下date-effective的格式为<code>dd-MMM-yyyy</code>，即英文操作系统中为<code>25-Sep-2016</code>,中文操作系统中为<code>25-九月-2019</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rule &quot;rule-02&quot;</div><div class="line">    salience 2</div><div class="line">    date-effective &quot;25-十二月-2016&quot;  // dd-MMM-yyyy</div><div class="line">//    date-effective &quot;25-Sep-2016&quot;  // dd-MMM-yyyy</div><div class="line">    when</div><div class="line">        $messageFact : Message($status : status == Message.HELLO, $newMessage : message);</div><div class="line">    then</div><div class="line">        System.out.println(&quot;rule-02, Begin to chagne message of fact&quot;);</div><div class="line">        $messageFact.setMessage(&quot;New message&quot;);</div><div class="line">end</div></pre></td></tr></table></figure></p>
<h4 id="date-expires"><a href="#date-expires" class="headerlink" title="date-expires"></a>date-expires</h4><p>规则的实效时间，和<code>date-effective</code>属性的意思相反。如果<code>系统时间</code> &gt;= date-expires设置的时间，那么规则无效，不被执行。</p>
<h4 id="enabled"><a href="#enabled" class="headerlink" title="enabled"></a>enabled</h4><p>设置该规则是否启用，布尔类型，可选值为false|true。</p>
<h4 id="dialect"><a href="#dialect" class="headerlink" title="dialect"></a>dialect</h4><p>定义规则文件中使用的语言，可选值有<code>java</code>和<code>mvel</code>,缺省值是<code>java</code>。</p>
<h4 id="duration"><a href="#duration" class="headerlink" title="duration"></a>duration</h4><p>该属性值为长整型，单位为毫秒。如果设置了该属性，那么该规则在实行的时候，会在<code>duration</code>设置的毫秒数后，在另外一个线程中执行该规则。</p>
<h4 id="lock-on-active"><a href="#lock-on-active" class="headerlink" title="lock-on-active"></a>lock-on-active</h4><p><code>no-loop</code> 的加强版。</p>
<h4 id="activation-group、"><a href="#activation-group、" class="headerlink" title="activation-group、"></a>activation-group、</h4><p>规则组属性，如果多个规则具有相同<code>activation-group</code>属性值，那么表示这些规则属于同一个规则组中，同一规则组中的规则，当以有一个规则执行了，其余规则就不在执行了。规则组中的规则优先级还是通过<code>salience</code>来控制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">rule &quot;rule-01&quot;</div><div class="line">    salience 1</div><div class="line">    activation-group &quot;group-01&quot;</div><div class="line">    when</div><div class="line">        $messageFact : Message($status : status == Message.HELLO, $newMessage : message);</div><div class="line">    then</div><div class="line">        System.out.println(&quot;rule-01. Begin to chagne message of fact&quot;);</div><div class="line">        $messageFact.setMessage(&quot;New message&quot;);</div><div class="line">end</div><div class="line"></div><div class="line">rule &quot;rule-02&quot;</div><div class="line">    salience 2</div><div class="line">    activation-group &quot;group-01&quot;</div><div class="line">    when</div><div class="line">        $messageFact : Message($status : status == Message.HELLO, $newMessage : message);</div><div class="line">    then</div><div class="line">        System.out.println(&quot;rule-02, Begin to chagne message of fact&quot;);</div><div class="line">        $messageFact.setMessage(&quot;New message&quot;);</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p>如上述的两个规则，会优先执行规则组<code>group-01</code>中的<code>rule-02</code>规则，而<code>rule-01</code>规则不会在执行了。</p>
<h4 id="agenda-group"><a href="#agenda-group" class="headerlink" title="agenda-group"></a>agenda-group</h4><p>议程组属性，如果规则中设置了该属性，要使得议程组中的规则生效并正常执行，那么必须要给该规则再设置<code>auto-focus</code>属性。如果多个规则设置了该属性，组中的执行顺序由<code>salience</code>属性决定。如果有多个议程组规则，议程组的执行顺序由组中规则优先级最高的规则决定个，并且当一个议程组中的规则全部执行完成后(即使后面议程组的中的某些规则优先级比当前正在执行的议程组中的规则的优先级高，那么也得等当前议程组中的规则完了，才会执行下一个议程组中的规则)，才会执行下一个议程组中的规则，议程组的优先级，比普通规则优先级高，即使普通规则的<code>salience</code>最大，也还是会先执行议程组中的规则，而普通规则和<code>activation-group</code>的执行顺序则是由<code>salience</code>决定。</p>
<h4 id="auto-focus"><a href="#auto-focus" class="headerlink" title="auto-focus"></a>auto-focus</h4><p>该属性的作用是用来在已设置了<code>agenda-group</code>的规则上设置该规则是否可以自动独取Focus，如果该属性设置为true，那么在引擎执行时就会执行该 议程组，否则不会。</p>
<h4 id="ruleflow-group"><a href="#ruleflow-group" class="headerlink" title="ruleflow-group"></a>ruleflow-group</h4><p>在使用规则流的时候要用到ruleflow-group 属性，该属性的值为一个字符串，作用是用来将规则划分为一个个的组，然后在规则流当中通过使用ruleflow-group 属性的值，从而使用对应的规则。后面在讨论规则流的时候还要对该属性进行详细介绍。</p>
<p>到此，<code>drl</code>规则文件在中的属性已介绍完了，如果有写得不对的地方，请指正，谢谢。同时，通过自己写作记录，提升了自己对drools的先关认知，也希望帮助有所需要的朋友。</p>
]]></content>
      
        <categories>
            
            <category> drools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> drools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[drools中kmodule.xml文件介绍]]></title>
      <url>/2017/03/05/drools-kmodule/</url>
      <content type="html"><![CDATA[<p>本文主要介绍drools中的kmodule.xml文件的相关配置的含义。<br><a id="more"></a></p>
<h3 id="kmodule-xml文件"><a href="#kmodule-xml文件" class="headerlink" title="kmodule.xml文件"></a>kmodule.xml文件</h3><p>要想使用drools规则引擎，首先要在项目的<code>resources/META-INF</code>路径下添加<code>kmodule.xml</code>文件。如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">kmodule</span> <span class="attr">xmlns</span>=<span class="string">"http://jboss.org/kie/6.0.0/kmodule"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- kbase是一个应用程序知识的定义的仓库，里面包含要使用的规则 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">kbase</span> <span class="attr">name</span>=<span class="string">"rules"</span> <span class="attr">packages</span>=<span class="string">"com.drools.examples.mine"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ksession</span> <span class="attr">name</span>=<span class="string">"ksession-rules"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">kbase</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">kmodule</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>后面我们将介绍一下<code>kmodule.xml</code>文件中的相关配置的含义。</p>
<h3 id="kbase-属性介绍"><a href="#kbase-属性介绍" class="headerlink" title="kbase 属性介绍"></a>kbase 属性介绍</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">缺省值</th>
<th style="text-align:center">允许值</th>
<th style="text-align:left">含义解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">无</td>
<td style="text-align:center">任何</td>
<td style="text-align:left">用于从KieContainer中检索KieBase，必须的属性。</td>
</tr>
<tr>
<td style="text-align:center">includes</td>
<td style="text-align:center">无</td>
<td style="text-align:center">以逗号分割的KieBase列表</td>
<td style="text-align:left">用于将当前kmodule中的其他KieBases包含到当前的KieBase中。</td>
</tr>
<tr>
<td style="text-align:center">packages</td>
<td style="text-align:center">所有</td>
<td style="text-align:center">以逗号分割的KieBase列表</td>
<td style="text-align:left">默认将resources下的所有文件夹下得drl包含到当前KieBase，用来限制编译那些drl属于当前KieBase。</td>
</tr>
<tr>
<td style="text-align:center">default</td>
<td style="text-align:center">false</td>
<td style="text-align:center">true，false</td>
<td style="text-align:left">定义是否为kmodule默认的KieBase，如果是，那么当从KieContainer中创建KieBase时，可以不用指定KieBase的name值。一个kmodule中最多只能有一个默认的KieBase。</td>
</tr>
<tr>
<td style="text-align:center">equalsBehavior</td>
<td style="text-align:center">identity</td>
<td style="text-align:center">identity，equality</td>
<td style="text-align:left">定义Drools事实(fact)查询到工作内存(Working Memory)的行为，identity:不管当前工作内存中是否存在该事实，都创建一个FactHandle事实；equality：当工作内存中不存在当前事实时才创建。</td>
</tr>
<tr>
<td style="text-align:center">eventProcessingMode</td>
<td style="text-align:center">cloud</td>
<td style="text-align:center">cloud, stream</td>
<td style="text-align:left">当以cloud模式编译时，KieBase被当成是一个普通的事实对待；而当以stream模式编译时，KieBase允许对它进行时间推理。</td>
</tr>
<tr>
<td style="text-align:center">declarativeAgenda</td>
<td style="text-align:center">disabled</td>
<td style="text-align:center">disabled, enabled</td>
<td style="text-align:left">定义是否启用声明式议程</td>
</tr>
</tbody>
</table>
<h3 id="ksession-属性介绍"><a href="#ksession-属性介绍" class="headerlink" title="ksession 属性介绍"></a>ksession 属性介绍</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">缺省值</th>
<th style="text-align:center">允许值</th>
<th style="text-align:left">含义解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">无</td>
<td style="text-align:center">任何</td>
<td style="text-align:left">名字具有唯一性，用于从KieContainer中获取KieSession，必须的属性。</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">stateful</td>
<td style="text-align:center">stateful, stateless</td>
<td style="text-align:left">stateful:允许在工作内存中循环执行； stateless：对于工作内存中提供的数据集，只能执行一次。</td>
</tr>
<tr>
<td style="text-align:center">default</td>
<td style="text-align:center">false</td>
<td style="text-align:center">true, false</td>
<td style="text-align:left">定义是否为kmodule默认的kieSession，如果是，那么从KieContainer中创建KieSession时，可以不用指定KieSession的name值，一个kmodule中，对于每一种type，最多只能有一个默认的KieBase。</td>
</tr>
<tr>
<td style="text-align:center">clockType</td>
<td style="text-align:center">realtime</td>
<td style="text-align:center">realtime, pseudo</td>
<td style="text-align:left">定义事件的时间戳是由系统时钟还是应用程序的伪时钟决定。该lock在对时间规则进行单元测时非常有用。</td>
</tr>
<tr>
<td style="text-align:center">beliefSystem</td>
<td style="text-align:center">simple</td>
<td style="text-align:center">simple, jtms, defeasible</td>
<td style="text-align:left">通过当前KieSession的此属性值来定义belief system的类型。</td>
</tr>
</tbody>
</table>
<p><code>注意</code>：上述是关于kbase和ksession的属性的基本介绍，如有描述不当的地方，请指正。</p>
]]></content>
      
        <categories>
            
            <category> drools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> drools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Drools简单示例]]></title>
      <url>/2017/03/04/drools-simple-example/</url>
      <content type="html"><![CDATA[<p>本文主要通过一个小的事例程序，介绍drools的基本使用，先通过一个简单的例子来感受一下drools的魅力。<br><a id="more"></a></p>
<h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>idea + maven + drools-6.4.0-Final</p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>如图所示：</p>
<p><img src="http://p1.bqimg.com/1949/a69e3428d5b36c31.png" alt="Markdown"></p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></div><div class="line">         http://maven.apache.org/maven-v4_0_0.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>drools.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">runtime.version</span>&gt;</span>6.4.0.Final<span class="tag">&lt;/<span class="name">runtime.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-internal<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-ci<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jbpm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jbpm-kie-services<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-decisiontables<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knowledge-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jbpm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jbpm-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="kmodule-xml文件"><a href="#kmodule-xml文件" class="headerlink" title="kmodule.xml文件"></a>kmodule.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">kmodule</span> <span class="attr">xmlns</span>=<span class="string">"http://jboss.org/kie/6.0.0/kmodule"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">kbase</span> <span class="attr">name</span>=<span class="string">"helloworld"</span> <span class="attr">packages</span>=<span class="string">"com.drools.examples.helloworld"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ksession</span> <span class="attr">name</span>=<span class="string">"ksession-helloworld"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">kbase</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">kmodule</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="规则文件helloworldRule-drl"><a href="#规则文件helloworldRule-drl" class="headerlink" title="规则文件helloworldRule.drl"></a>规则文件helloworldRule.drl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.drools.examples.helloworld</div><div class="line"></div><div class="line">import com.drools.examples.helloworld.Message;</div><div class="line"></div><div class="line">rule &quot;hello-rule&quot;</div><div class="line"></div><div class="line">    salience 1</div><div class="line"></div><div class="line">    when</div><div class="line">        $messageFact : Message($status : status == Message.HELLO, $newMessage : message);</div><div class="line">    then</div><div class="line">        System.out.println(&quot;Begin to chagne message of fact&quot;);</div><div class="line">        $messageFact.setMessage(&quot;New message&quot;);</div><div class="line">        $messageFact.setStatus(Message.GOODBYE);</div><div class="line">end</div></pre></td></tr></table></figure>
<h4 id="Message事实对象-普通javabean"><a href="#Message事实对象-普通javabean" class="headerlink" title="Message事实对象(普通javabean)"></a>Message事实对象(普通javabean)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.drools.examples.helloworld;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HELLO = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GOODBYE = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	</div><div class="line">	...... setter ......</div><div class="line">    ...... getter ......</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试类DroolsTest-java"><a href="#测试类DroolsTest-java" class="headerlink" title="测试类DroolsTest.java"></a>测试类DroolsTest.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.drools.examples.helloworld;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.kie.api.KieServices;</div><div class="line"><span class="keyword">import</span> org.kie.api.runtime.KieContainer;</div><div class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            KieServices ks = KieServices.Factory.get();</div><div class="line">            KieContainer kContainer = ks.getKieClasspathContainer();</div><div class="line">            KieSession kSession = kContainer.newKieSession(<span class="string">"ksession-helloworld"</span>);</div><div class="line"></div><div class="line">            Message message = <span class="keyword">new</span> Message();</div><div class="line">            message.setMessage(<span class="string">"Origin message"</span>);</div><div class="line">            message.setStatus(Message.HELLO);</div><div class="line">            message.setAge(<span class="number">20</span>);</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"Origin ：message="</span> + message.getMessage() + <span class="string">", status="</span> + message.getStatus());</div><div class="line"></div><div class="line">            kSession.insert(message);</div><div class="line">            kSession.fireAllRules();</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"New    ：message="</span> + message.getMessage() + <span class="string">", status="</span> + message.getStatus());</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="http://p1.bpimg.com/1949/435f65ab3b68e827.png" alt="Markdown"></p>
<p>ok，到此，drools的小例子就成功跑起来了。</p>
]]></content>
      
        <categories>
            
            <category> drools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> drools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx安装攻略]]></title>
      <url>/2017/02/15/nginx-install-on-centos/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/1949/f9bce752a3999037.png" style="float:right;margin-top:10px;margin-left:15px;"></p>
<p>最近在工作中需使用配置中心，将配置文件集中起来，做统一的管理，于是打算先研究一下百度的<code>disconf</code>，看看能否引入项目中过来使用，首先，在安装<code>disconf</code>时，需要使用到<code>nginx</code>，于是准备在linux上先把nginx装上。以前也装上<code>nginx</code>研究过，感觉安装还是比较的简单，所以也就没做笔记。这回借这个机会，顺便把安装笔也一同给补上，作为以后学习回顾的记录。<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>nginx</code>是用C语言开发的，推荐安装在linux环境上运行，所以本文的linux使用的是centos7，当然window上也能安装，一键式安装，相对来说更简单。好了，下面就将安装的过程及顺序记录下来(不同的linux版本安装顺序大致相同，由于系统自带的工具不同，可能安装相对来说有点出入，但需要的依赖环境和组件是相同的)。</p>
<h3 id="安装GNU编译器套件-gcc"><a href="#安装GNU编译器套件-gcc" class="headerlink" title="安装GNU编译器套件(gcc)"></a>安装GNU编译器套件(gcc)</h3><p>作用是用来编译<code>nginx</code>源代码的，不多说了，想要了解更多的，请自行google或<a href="https://www.baidu.com/" target="_blank" rel="external">百度一下</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc-c++</div></pre></td></tr></table></figure></p>
<p>正常情况下，如果看到如下信息，则表示<code>gcc-c++</code>成功安装完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Installed:</div><div class="line">  gcc-c++.x86_64 0:4.8.5-11.el7                                                 </div><div class="line"></div><div class="line">Dependency Installed:</div><div class="line">  libstdc++-devel.x86_64 0:4.8.5-11.el7                                         </div><div class="line"></div><div class="line">Dependency Updated:</div><div class="line">  cpp.x86_64 0:4.8.5-11.el7               gcc.x86_64 0:4.8.5-11.el7            </div><div class="line">  libgcc.x86_64 0:4.8.5-11.el7            libgomp.x86_64 0:4.8.5-11.el7        </div><div class="line">  libstdc++.x86_64 0:4.8.5-11.el7        </div><div class="line"></div><div class="line">Complete!</div></pre></td></tr></table></figure></p>
<h3 id="安装-PCRE-pcre-devel"><a href="#安装-PCRE-pcre-devel" class="headerlink" title="安装 PCRE pcre-devel"></a>安装 PCRE pcre-devel</h3><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用的是<code>pcre</code>来解析正则表达式，所以需要在 linux上安装<code>pcre</code>库，<code>pcre-devel</code>是使用 <code>pcre</code>的一个二次开发库。nginx也需要此依赖库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y pcre pcre-devel</div></pre></td></tr></table></figure></p>
<p>正常情况下，如果看到如下信息，则表示<code>PCRE pcre-devel</code>成功安装完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Total                                              657 kB/s | 899 kB  00:01     </div><div class="line">Running transaction check</div><div class="line">Running transaction test</div><div class="line">Transaction test succeeded</div><div class="line">Running transaction</div><div class="line">  Updating   : pcre-8.32-15.el7_2.1.x86_64                                  1/3 </div><div class="line">  Installing : pcre-devel-8.32-15.el7_2.1.x86_64                            2/3 </div><div class="line">  Cleanup    : pcre-8.32-15.el7.x86_64                                      3/3 </div><div class="line">  Verifying  : pcre-8.32-15.el7_2.1.x86_64                                  1/3 </div><div class="line">  Verifying  : pcre-devel-8.32-15.el7_2.1.x86_64                            2/3 </div><div class="line">  Verifying  : pcre-8.32-15.el7.x86_64                                      3/3 </div><div class="line"></div><div class="line">Installed:</div><div class="line">  pcre-devel.x86_64 0:8.32-15.el7_2.1                                           </div><div class="line"></div><div class="line">Updated:</div><div class="line">  pcre.x86_64 0:8.32-15.el7_2.1                                                 </div><div class="line"></div><div class="line">Complete!</div></pre></td></tr></table></figure></p>
<h3 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h3><p><code>zlib</code>库提供了很多种压缩和解压缩的方式,nginx使用<code>zlib</code>对http包的内容进行gzip，所以需要在Centos上需要安装此依赖库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y zlib zlib-devel</div></pre></td></tr></table></figure></p>
<p>正常情况下，如果看到如下信息，则表示<code>zlib</code>成功安装完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Total                                              182 kB/s | 140 kB  00:00     </div><div class="line">Running transaction check</div><div class="line">Running transaction test</div><div class="line">Transaction test succeeded</div><div class="line">Running transaction</div><div class="line">  Updating   : zlib-1.2.7-17.el7.x86_64                                     1/3 </div><div class="line">  Installing : zlib-devel-1.2.7-17.el7.x86_64                               2/3 </div><div class="line">  Cleanup    : zlib-1.2.7-15.el7.x86_64                                     3/3 </div><div class="line">  Verifying  : zlib-devel-1.2.7-17.el7.x86_64                               1/3 </div><div class="line">  Verifying  : zlib-1.2.7-17.el7.x86_64                                     2/3 </div><div class="line">  Verifying  : zlib-1.2.7-15.el7.x86_64                                     3/3 </div><div class="line"></div><div class="line">Installed:</div><div class="line">  zlib-devel.x86_64 0:1.2.7-17.el7                                              </div><div class="line"></div><div class="line">Updated:</div><div class="line">  zlib.x86_64 0:1.2.7-17.el7                                                    </div><div class="line"></div><div class="line">Complete!</div></pre></td></tr></table></figure></p>
<h3 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h3><p><code>OpenSSL</code>是一个强大的安全套接字层密码库，包括主要的密码算法、常用的密钥和证书封装管理功能以及SSL协议。nginx不仅支持http协议，还支持 https（即在ssl协议上传输http），所以需要在Centos安装此依赖库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y openssl openssl-devel</div></pre></td></tr></table></figure></p>
<p>正常情况下，如果看到如下信息，则表示<code>OpenSSL</code>成功安装完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">Total                                              827 kB/s | 8.7 MB  00:10     </div><div class="line">Running transaction check</div><div class="line">Running transaction test</div><div class="line">Transaction test succeeded</div><div class="line">Running transaction</div><div class="line">  Updating   : libcom_err-1.42.9-9.el7.x86_64                              1/42 </div><div class="line">  Updating   : libsepol-2.5-6.el7.x86_64                                   2/42 </div><div class="line">  Updating   : libselinux-2.5-6.el7.x86_64                                 3/42 </div><div class="line">  ......                     </div><div class="line">  Verifying  : systemd-python-219-19.el7.x86_64                           40/42 </div><div class="line">  Verifying  : libselinux-2.2.2-6.el7.x86_64                              41/42 </div><div class="line">  Verifying  : 1:openssl-1.0.1e-42.el7.9.x86_64                           42/42 </div><div class="line"></div><div class="line">Installed:</div><div class="line">  openssl-devel.x86_64 1:1.0.1e-60.el7_3.1                                      </div><div class="line"></div><div class="line">Dependency Installed:</div><div class="line">  keyutils-libs-devel.x86_64 0:1.5.8-3.el7  krb5-devel.x86_64 0:1.14.1-27.el7_3 </div><div class="line">  libcom_err-devel.x86_64 0:1.42.9-9.el7    libkadm5.x86_64 0:1.14.1-27.el7_3   </div><div class="line">  libselinux-devel.x86_64 0:2.5-6.el7       libsepol-devel.x86_64 0:2.5-6.el7   </div><div class="line">  libverto-devel.x86_64 0:0.2.5-4.el7      </div><div class="line"></div><div class="line">Updated:</div><div class="line">  openssl.x86_64 1:1.0.1e-60.el7_3.1       systemd.x86_64 0:219-30.el7_3.6      </div><div class="line"></div><div class="line">Dependency Updated:</div><div class="line">  e2fsprogs.x86_64 0:1.42.9-9.el7                                               </div><div class="line">  e2fsprogs-libs.x86_64 0:1.42.9-9.el7                                          </div><div class="line">  krb5-libs.x86_64 0:1.14.1-27.el7_3                                            </div><div class="line">  krb5-workstation.x86_64 0:1.14.1-27.el7_3                                     </div><div class="line">  libcom_err.x86_64 0:1.42.9-9.el7                                              </div><div class="line">  libgudev1.x86_64 0:219-30.el7_3.6                                             </div><div class="line">  libselinux.x86_64 0:2.5-6.el7                                                 </div><div class="line">  libselinux-python.x86_64 0:2.5-6.el7                                          </div><div class="line">  libselinux-utils.x86_64 0:2.5-6.el7                                           </div><div class="line">  libsepol.x86_64 0:2.5-6.el7                                                   </div><div class="line">  libss.x86_64 0:1.42.9-9.el7                                                   </div><div class="line">  openssl-libs.x86_64 1:1.0.1e-60.el7_3.1                                       </div><div class="line">  systemd-libs.x86_64 0:219-30.el7_3.6                                          </div><div class="line">  systemd-python.x86_64 0:219-30.el7_3.6                                        </div><div class="line">  systemd-sysv.x86_64 0:219-30.el7_3.6                                          </div><div class="line"></div><div class="line">Complete!</div></pre></td></tr></table></figure></p>
<h3 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h3><p>1.官网下载：<a href="https://nginx.org/en/download.html" target="_blank" rel="external">https://nginx.org/en/download.html</a><br>2.使用wget命令下:wget -c <a href="https://nginx.org/download/nginx-1.10.1.tar.gz" target="_blank" rel="external">https://nginx.org/download/nginx-1.10.1.tar.gz</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost opt]# wget -c https://nginx.org/download/nginx-1.10.1.tar.gz</div><div class="line">--2017-02-24 06:11:12--  https://nginx.org/download/nginx-1.10.1.tar.gz</div><div class="line">Resolving nginx.org (nginx.org)... 206.251.255.63, 95.211.80.227, 2001:1af8:4060:a004:21::e3, ...</div><div class="line">Connecting to nginx.org (nginx.org)|206.251.255.63|:443... connected.</div><div class="line">ERROR: cannot verify nginx.org&apos;s certificate, issued by ‘/C=EN/CN=Sample CA 2’:</div><div class="line">  Unable to locally verify the issuer&apos;s authority.</div><div class="line">To connect to nginx.org insecurely, use `--no-check-certificate&apos;.</div></pre></td></tr></table></figure>
<p>如果看到如上的提示信息，说明<code>nginx.com</code>证书验证失败，提示使用无证书下载，即加上提示中的<code>--no-check-certificate</code>参数。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cd /opt</div><div class="line">[root@localhost opt]# wget -c --no-check-certificate https://nginx.org/download/nginx-1.10.1.tar.gz</div></pre></td></tr></table></figure>
<h3 id="解压nginx"><a href="#解压nginx" class="headerlink" title="解压nginx"></a>解压nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost opt]# tar -zxvf nginx-1.10.1</div></pre></td></tr></table></figure>
<h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>进入nginx的解压目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost opt]# cd nginx-1.10.1/</div><div class="line">[root@localhost nginx-1.10.1]# ./configure</div></pre></td></tr></table></figure></p>
<p>说明：<code>./configure</code>命令使用的是nginx默认的配置方式。其默认的相关配置会在配置完成后显示出来，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Configuration summary</div><div class="line">  + using system PCRE library</div><div class="line">  + OpenSSL library is not used</div><div class="line">  + md5: using system crypto library</div><div class="line">  + sha1: using system crypto library</div><div class="line">  + using system zlib library</div><div class="line"></div><div class="line">  nginx path prefix: &quot;/usr/local/nginx&quot;</div><div class="line">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</div><div class="line">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</div><div class="line">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</div><div class="line">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class="line">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</div><div class="line">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</div><div class="line">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</div><div class="line">  nginx http client request body temporary files: &quot;client_body_temp&quot;</div><div class="line">  nginx http proxy temporary files: &quot;proxy_temp&quot;</div><div class="line">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</div><div class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</div><div class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</div></pre></td></tr></table></figure></p>
<p>当然，也可以自定义配置安装，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">./configure \</div><div class="line">--prefix=/usr/local/nginx \</div><div class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</div><div class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</div><div class="line">--lock-path=/var/lock/nginx.lock \</div><div class="line">--error-log-path=/var/log/nginx/error.log \</div><div class="line">--http-log-path=/var/log/nginx/access.log \</div><div class="line">--with-http_gzip_static_module \</div><div class="line">--http-client-body-temp-path=/var/temp/nginx/client \</div><div class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</div><div class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</div><div class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</div><div class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</div></pre></td></tr></table></figure></p>
<p>这里我就使用默认的配置安装。</p>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.10.1]# make &amp; make install</div><div class="line">......</div><div class="line">test -d &apos;/usr/local/nginx/logs&apos; \</div><div class="line">	|| mkdir -p &apos;/usr/local/nginx/logs&apos;</div><div class="line">test -d &apos;/usr/local/nginx/html&apos; \</div><div class="line">	|| cp -R html &apos;/usr/local/nginx&apos;</div><div class="line">test -d &apos;/usr/local/nginx/logs&apos; \</div><div class="line">	|| mkdir -p &apos;/usr/local/nginx/logs&apos;</div><div class="line">make[1]: Leaving directory `/opt/nginx-1.10.1&apos;</div><div class="line">[1]+  Done                    make</div></pre></td></tr></table></figure>
<p>看到如上信息，表示<code>nginx</code>安装成功。</p>
<h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><p>1.首先查找默认配置中安装的路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.10.1]# whereis nginx</div><div class="line">nginx: /usr/local/nginx</div></pre></td></tr></table></figure></p>
<p>2.启动nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.10.1]# cd /usr/local/nginx</div><div class="line">[root@localhost nginx]# cd sbin/</div><div class="line">[root@localhost sbin]# ./nginx</div></pre></td></tr></table></figure></p>
<p>然后在浏览器访问<code>http://localhost</code>，正常情况下就能看到如下页面信息。</p>
<p><img src="http://p1.bpimg.com/1949/1cde0025231d46e8.png" alt="Nginx首界面"><br>到此，nginx就安装成功了。</p>
<p><code>注意</code>：ngxin安装好，默认监听的是本机的<code>80端口</code>，如果是安装在虚拟机中，有可能本地实体机无法访问到虚拟机中的nginx主界面，原因可能是<code>80端口</code>被防火墙屏蔽了，解决办法是暴露<code>80端口</code>即可。如：“<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# /sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</div></pre></td></tr></table></figure></p>
<p>3.其他相关命令<br>3.1 <code>/nginx -s stop</code>：强制关闭，会先查询到nginx的进程id，然后再使用kill命令杀死进程。<br>3.2 <code>/nginx -s quit</code>：待nginx进程处理完所有任务安全的进行停止。<br>3.3 <code>/nginx -s reload</code>：平滑的重新加载配置文件，即执行完当前正在处理的任务，然后再重新加载修改后的配文件。</p>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redis安装攻略]]></title>
      <url>/2016/11/15/redis-install-on-linux/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/1949/e5482fcc749bc356.jpg" style="float:right;margin-top:10px;margin-left:15px;height:140px;"></p>
<p>本文主要介绍怎样在linux环境下安装redis，官方文档的安装教程也是非常简单的<a href="http://redis.io/download。在了解了`redis`的使用场景以及基本原理后，要系统学习它，首先得让它运行起来，然后在慢慢练习并熟悉相关命令，下面让我们一起动手来试一试。" target="_blank" rel="external">http://redis.io/download。在了解了`redis`的使用场景以及基本原理后，要系统学习它，首先得让它运行起来，然后在慢慢练习并熟悉相关命令，下面让我们一起动手来试一试。</a><br><a id="more"></a></p>
<h3 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h3><h4 id="准备安装环境及软件"><a href="#准备安装环境及软件" class="headerlink" title="准备安装环境及软件"></a>准备安装环境及软件</h4><p>1.linux版本:CentOS7<br>2.redis版本:redis-3.0.5.tar.gz</p>
<h4 id="下载redis软件"><a href="#下载redis软件" class="headerlink" title="下载redis软件"></a>下载redis软件</h4><p>1.使用<code>wget</code>方式下载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-3.0.5.tar.gz</div></pre></td></tr></table></figure></p>
<p>2.直接下载<br>直接在网上下载redis安装包<code>redis-3.0.5.tar.gz</code>，然后放在linux服务器上，具体放置路径可以自定义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/src/</div></pre></td></tr></table></figure></p>
<p>以上两种方式都可行，实际情况视个人习惯与具体的环境来决定。</p>
<h3 id="开始安装redis"><a href="#开始安装redis" class="headerlink" title="开始安装redis"></a>开始安装redis</h3><p>在安装前，默认linux环境已经装好了。<br>1.解压redis-3.0.5.tar.gz文件，得到redis二进制源码文件：redis-3.0.5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]# ls</div><div class="line">redis-3.0.5  redis-3.0.5.tar.gz</div><div class="line">[root@localhost src]# cd redis-3.0.5/</div></pre></td></tr></table></figure></p>
<p>2.进入源码文件夹redis-3.0.3进行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]# cd redis-3.0.5</div><div class="line">[root@localhost redis-3.0.5]# make</div></pre></td></tr></table></figure></p>
<p>3.成功编译完成后，进入src文件进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis-3.0.5]# cd src/</div><div class="line">[root@localhost src]# make install</div></pre></td></tr></table></figure></p>
<p>OK，到此，redis在linux的安装就已完成了。</p>
<h3 id="组织reis配置和启动文件"><a href="#组织reis配置和启动文件" class="headerlink" title="组织reis配置和启动文件"></a>组织reis配置和启动文件</h3><p><code>redis</code>默认安装完成后，其相关的启动文件默认在<code>/usr/local/bin</code>目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]# cd /usr/local/bin</div><div class="line">[root@localhost bin]# ls</div><div class="line">redis-benchmark  redis-check-aof  redis-check-dump  redis-cli  redis-sentinel  redis-server</div></pre></td></tr></table></figure></p>
<p>为了方便使用和管理，安装完成后，我将redis的启动文件组织了一下，统一放在专门的<code>/usr/local/redis/bin</code>目录中进行管理:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# cp -r /usr/local/bin/ /usr/local/redis/</div><div class="line">[root@localhost bin]# ls</div><div class="line">redis-benchmark  redis-check-aof  redis-check-dump  redis-cli  redis-sentinel  redis-server</div><div class="line">[root@localhost bin]# pwd</div><div class="line">/usr/local/redis/bin</div></pre></td></tr></table></figure></p>
<p>OK，启动和配置文件组织好了，下面就可以启动起来运行试一试了。</p>
<h3 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动redis服务</h3><p>首先进入上面存放了redis启动和配置相关文件的专门的管理目录，在启动redis。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ./redis-server </div><div class="line">10545:C 25 Feb 22:50:07.408 # Warning: no config file specified, using the default config. In order to specify a config file use ./redis-server /path/to/redis.conf</div><div class="line">10545:M 25 Feb 22:50:07.408 * Increased maximum number of open files to 10032 (it was originally set to 1024).</div><div class="line">                _._                                                  </div><div class="line">           _.-``__ &apos;&apos;-._                                             </div><div class="line">      _.-``    `.  `_.  &apos;&apos;-._           Redis 3.0.5 (00000000/0) 64 bit</div><div class="line">  .-`` .-```.  ```\/    _.,_ &apos;&apos;-._                                   </div><div class="line"> (    &apos;      ,       .-`  | `,    )     Running in standalone mode</div><div class="line"> |`-._`-...-` __...-.``-._|&apos;` _.-&apos;|     Port: 6379</div><div class="line"> |    `-._   `._    /     _.-&apos;    |     PID: 10545</div><div class="line">  `-._    `-._  `-./  _.-&apos;    _.-&apos;                                   </div><div class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|                                  </div><div class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |           http://redis.io        </div><div class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;                                   </div><div class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|                                  </div><div class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |                                  </div><div class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;                                   </div><div class="line">      `-._    `-.__.-&apos;    _.-&apos;                                       </div><div class="line">          `-._        _.-&apos;                                           </div><div class="line">              `-.__.-&apos;                                               </div><div class="line"></div><div class="line">10545:M 25 Feb 22:50:07.410 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</div><div class="line">10545:M 25 Feb 22:50:07.410 # Server started, Redis version 3.0.5</div><div class="line">10545:M 25 Feb 22:50:07.410 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &apos;vm.overcommit_memory = 1&apos; to /etc/sysctl.conf and then reboot or run the command &apos;sysctl vm.overcommit_memory=1&apos; for this to take effect.</div><div class="line">10545:M 25 Feb 22:50:07.410 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &apos;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&apos; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</div><div class="line">10545:M 25 Feb 22:50:07.410 * DB loaded from disk: 0.000 seconds</div><div class="line">10545:M 25 Feb 22:50:07.410 * The server is now ready to accept connections on port 6379</div></pre></td></tr></table></figure></p>
<p><code>注意</code>：目前的启动方式，redis只在前台运行，也就是当前命令窗口关闭，redis服务也就关闭了。如果要让其在后台运行，只需要修改其配置文件即可。</p>
<h3 id="编辑redis-conf配置文件"><a href="#编辑redis-conf配置文件" class="headerlink" title="编辑redis.conf配置文件"></a>编辑redis.conf配置文件</h3><p>在上述的安装方式中，默认启动加载文的是<code>/usr/local/redis-3.0.5</code>路径下的<code>redis.conf</code>配置。和上面一样，复制一份到统一的目录下，方便管理，然后修改<code>redis.conf</code>中的<code>daemonize no</code>为<code>daemonize yes</code>，即以守护进程运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis-3.0.5]# cp /usr/local/redis-3.0.5/redis.conf /usr/local/redis/conf</div></pre></td></tr></table></figure></p>
<p>然后在启动时制动配置文件，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ./redis-server ../conf/redis.conf </div><div class="line">[root@localhost bin]# ps -ef | grep redis</div><div class="line">root      10713      1  0 22:58 ?        00:00:00 ./redis-server *:6379</div><div class="line">root      10717   6898  0 22:58 pts/1    00:00:00 grep --color=auto redis</div></pre></td></tr></table></figure></p>
<p>reis已经成功在后台运行了，其进程id是10713</p>
<h3 id="连接redis服务"><a href="#连接redis服务" class="headerlink" title="连接redis服务"></a>连接redis服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ./redis-cli</div><div class="line">127.0.0.1:6379&gt; ping</div><div class="line">PONG</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure>
<h3 id="关闭redis服务"><a href="#关闭redis服务" class="headerlink" title="关闭redis服务"></a>关闭redis服务</h3><p>1.通过pkill命令来关闭redis服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# pkill redis</div></pre></td></tr></table></figure></p>
<p>2.通过kill进程号来关闭<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ps -ef | grep redis</div><div class="line">root      3730     1  0 23:21 ?        00:00:00 ./redis-server *:6379           </div><div class="line">root      3751  3574  0 23:24 pts/2    00:00:00 grep redis</div><div class="line">[root@localhost bin]# kill -9 3730</div></pre></td></tr></table></figure></p>
<p>到这里，关于redis的简单安装、启动、关闭都ok，整个过程还是很简单。</p>
]]></content>
      
        <categories>
            
            <category> redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper集群搭建攻略]]></title>
      <url>/2016/11/12/zookeeper-cluster-install-guide/</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/1949/e72f4b926e408381.png" style="float:right;margin-top:10px;margin-left:15px;height:150px;"></p>
<p>最近工作中使用到了<code>zookeeper</code>，于是决定着手研究一下<code>zookeeper</code>的原理、使用场景、搭建方式等，本文主要讲解<code>zookeeper</code>的安装（先把环境搭好运行起来再说别的）。后面后时间在具体分析<code>zookeeper</code>相关知识。<code>zookeeper</code>有三种运行模式，分别是<code>集群模式</code>、<code>伪集群模式</code>、<code>单机模式</code>，本文主要搭建的是集群模式，也是工作中使用的模式，所以也推荐直接搭建<code>zookeeper</code>的集群模式。<br><a id="more"></a></p>
<h3 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h3><h4 id="准备linux环境"><a href="#准备linux环境" class="headerlink" title="准备linux环境"></a>准备linux环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">虚拟机环境centos 7</div></pre></td></tr></table></figure>
<h4 id="准备jdk环境"><a href="#准备jdk环境" class="headerlink" title="准备jdk环境"></a>准备jdk环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# java -version</div><div class="line">java version &quot;1.7.0_75&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.7.0_75-b13)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode)</div></pre></td></tr></table></figure>
<h4 id="准备zookeper"><a href="#准备zookeper" class="headerlink" title="准备zookeper"></a>准备zookeper</h4><p>下载地址：<a href="http://www.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="external">zookeeper-3.4.6.tar.gz</a></p>
<h3 id="开始安装zookeeper"><a href="#开始安装zookeeper" class="headerlink" title="开始安装zookeeper"></a>开始安装zookeeper</h3><h4 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h4><p>集群模式就是在多个服务节点上安装<code>zookeeper</code>，然后通过相关配置关联起来，形成一个集群。下面开始<code>zookeeper</code>的集群模式的搭建。<br>1.将下载好的<code>zookeeper-3.4.6.tar.gz</code>文件放置在<code>/opt</code>目录下并解压。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost opt]# tar -zxvf zookeeper-3.4.6.tar.gz </div><div class="line">[root@localhost opt]# ls</div><div class="line">zookeeper-3.4.6  zookeeper-3.4.6.tar.gz</div></pre></td></tr></table></figure></p>
<p>2.重命名解压包。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost opt]# mv zookeeper-3.4.6 zookeeper</div><div class="line">[root@localhost opt]# ls</div><div class="line">zookeeper  zookeeper-3.4.6.tar.gz</div></pre></td></tr></table></figure></p>
<p>3 配置zookeeper，进入到zookeeper/conf目录下，拷贝配置文件示例<code>zoo_sample.cfg</code>得到<code>zoo.cfg</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost conf]# cp zoo_sample.cfg zoo.cfg</div><div class="line">[root@localhost conf]# ls</div><div class="line">configuration.xsl  log4j.properties  zoo.cfg  zoo_sample.cfg</div></pre></td></tr></table></figure></p>
<p>4 编辑配置文件zoo.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># The number of milliseconds of each tick</div><div class="line">tickTime=2000</div><div class="line"># The number of ticks that the initial</div><div class="line"># synchronization phase can take</div><div class="line">initLimit=10</div><div class="line"># The number of ticks that can pass between</div><div class="line"># sending a request and getting an acknowledgement</div><div class="line">syncLimit=5</div><div class="line"># the directory where the snapshot is stored.</div><div class="line"># do not use /tmp for storage, /tmp here is just</div><div class="line"># example sakes.</div><div class="line">dataDir=/var/zookeeper</div><div class="line"># the port at which the clients will connect</div><div class="line">clientPort=2181</div><div class="line"># the maximum number of client connections.</div><div class="line"># increase this if you need to handle more clients</div><div class="line">#maxClientCnxns=60</div><div class="line">#</div><div class="line"># Be sure to read the maintenance section of the</div><div class="line"># administrator guide before turning on autopurge.</div><div class="line">#</div><div class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</div><div class="line">#</div><div class="line"># The number of snapshots to retain in dataDir</div><div class="line">#autopurge.snapRetainCount=3</div><div class="line"># Purge task interval in hours</div><div class="line"># Set to &quot;0&quot; to disable auto purge feature</div><div class="line">#autopurge.purgeInterval=1</div><div class="line"></div><div class="line">server.1=192.168.254.130:2888:3888</div><div class="line">server.2=192.168.254.131:2888:3888</div><div class="line">server.3=192.168.254.132:2888:3888</div></pre></td></tr></table></figure></p>
<p><code>注意:</code><br>1.配置数据节点，<code>dataDir=/var/zookeeper</code>，该位置可以自定义。<br>2.添加服务节点配置，格式为<code>server.id=ip：port：port</code>，id被称为Server ID，范围在1~255。</p>
<p>5 配置myid文件。在数据节点指定的目录中，添加<code>myid</code>配置文件，id编号和zoo.cfg中的服务节点ip对应。该配置文件只有一行内容，并且是数字，对应服务器节点的Server ID。</p>
<p>6 其他机器节点做如上相应配置，对应的myid配置，参考zoo.cfg文件。</p>
<hr>
<h4 id="伪集群模式"><a href="#伪集群模式" class="headerlink" title="伪集群模式"></a>伪集群模式</h4><p>所谓伪集群，简单点说，集群所有服务节点都在一台机器上，但是还是以集群的方式对位提供服务。部分配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server.1=192.168.254.130:2888:3888</div><div class="line">server.2=192.168.254.130:2889:3889</div><div class="line">server.3=192.168.254.130:2890:3890</div></pre></td></tr></table></figure></p>
<h4 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4><p>单机模式只是一种特殊的集群模式，为便于理解，可以粗略地认为集群中只有一个服务节点的集群。单机模式的部署步骤和集群模式的部署步骤基本一致，只是在zoo.cfg配置文件上有点差异，只配置本机服务节点即可。部分配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.1=192.168.254.130:2888:3888</div></pre></td></tr></table></figure></p>
<h3 id="安装总结"><a href="#安装总结" class="headerlink" title="安装总结"></a>安装总结</h3><p>通常来说，不管是企业还是个人研究，都已集群模式为主，伪集群和单机模式用的较少。</p>
<h3 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h3><p>1.进入zk的bin目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost conf]# cd /opt/zookeeper/bin/</div><div class="line">[root@localhost bin]# ls</div><div class="line">README.txt  zkCleanup.sh  zkCli.cmd  zkCli.sh  zkEnv.cmd  zkEnv.sh  zkServer.cmd  zkServer.sh  zookeeper.out</div><div class="line">[root@localhost bin]#</div></pre></td></tr></table></figure></p>
<p>2.启动zookeeper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ./zkServer.sh start</div><div class="line">JMX enabled by default</div><div class="line">Using config: /opt/zookeeper/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div><div class="line">[root@localhost bin]#</div></pre></td></tr></table></figure></p>
<p>启动全部的<code>zookeeper</code>服务节点，只要节点成功启动超过半数，即存活的<code>zookeeper</code>节点超过半数，<code>zooLeeper</code>集群就能正常工作。</p>
<p>接下来可以通过相关命令来查看<code>zookeeper</code>的相关信息：<br>1.<code>./zkServer.sh status</code>：查看是否是领导者还是跟随者。<br>2.通过telnet工具来查看客户端是否成功启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# telnet 192.168.211.128 2181</div><div class="line">Trying 192.168.211.128...</div><div class="line">Connected to 192.168.211.128.</div><div class="line">Escape character is &apos;^]&apos;.</div></pre></td></tr></table></figure></p>
<p>注意：如果没有安装telnet，可以使用如下命令来安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install telnet</div></pre></td></tr></table></figure></p>
<p>然后使用stat命令来查看集群的启动信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# telnet 192.168.211.128 2181</div><div class="line">Trying 192.168.211.128...</div><div class="line">Connected to 192.168.211.128.</div><div class="line">Escape character is &apos;^]&apos;.</div><div class="line">stat</div><div class="line">Zookeeper version: 3.4.6-1569965, built on 02/20/2014 09:09 GMT</div><div class="line">Clients:</div><div class="line"> /192.168.211.128:47573[0](queued=0,recved=1,sent=0)</div><div class="line"></div><div class="line">Latency min/avg/max: 0/0/0</div><div class="line">Received: 1</div><div class="line">Sent: 0</div><div class="line">Connections: 1</div><div class="line">Outstanding: 0</div><div class="line">Zxid: 0x0</div><div class="line">Mode: follower</div><div class="line">Node count: 4</div><div class="line">Connection closed by foreign host.</div></pre></td></tr></table></figure></p>
<p><code>注意:</code>有可能在输入stat命令是报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# telnet 192.168.211.128 2181</div><div class="line">Trying 192.168.211.128...</div><div class="line">Connected to 192.168.211.128.</div><div class="line">Escape character is &apos;^]&apos;.</div><div class="line">stat</div><div class="line">This ZooKeeper instance is not currently serving requests</div><div class="line">Connection closed by foreign host.</div></pre></td></tr></table></figure>
<p>以上错误原因有一下两点：<br>1.集群没有选出来leader，当集群里的结点只剩下一台，或者不足半数时，集群进入崩溃恢复阶段，该阶集群不对外提供服务，就会出现这个错误提示。<br>2.集群配置的端口被防火墙屏蔽，解决方法是暴露集群端口。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# firewall-cmd --zone=public --add-port=2181/tcp --permanent</div><div class="line">[root@localhost bin]# firewall-cmd --zone=public --add-port=2888/tcp --permanent</div><div class="line">[root@localhost bin]# firewall-cmd --zone=public --add-port=3888/tcp --permanent</div><div class="line">[root@localhost bin]# firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>然后关闭集群，重启启动，OK，解决问题，集群成功启动起来，客户端访问正常，到此，<code>zookeeper</code>集群的简单搭建也就完成了，接下来就可以直接在服务器上学习和使用其相关命令，也可以使用程序来连接兵与其通信。</p>
]]></content>
      
        <categories>
            
            <category> zookeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git branch 常用命令]]></title>
      <url>/2016/10/15/git-branch-common-command/</url>
      <content type="html"><![CDATA[<p>众所周知，git是现在主流的版本控制软件，工作中使用的也是比较多，本文列出了本人工作中用得比较多的几个命令，一方面作为笔记查看，其次也是个人的一个小小汇总。<br><a id="more"></a></p>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p><code>git branch</code> : 只能查看本地分支。<br><code>git branch -r</code> : 只能查看远程分支。<br><code>git branch -a</code> : 查看所有分支，包括本地和远程服务骑上的分支。</p>
<hr>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p><code>git branch [branch-name]</code> : 创建本地分支，并停留在当前分支中。<br><code>git branch -b [branch-name]</code> : 创建本地分支，并切换到新建分支中。<br><code>git checkout [branch-name]</code> :  切换分支，在切换分支前，确保当前分支已经<code>commit</code>  。<br><code>git push origin [branch-name]</code> :  将本地分支推送到远端服务器。</p>
<hr>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p><code>git branch -d [branch-name]</code> : 删除本地分支，删除前必须要合并本地分支。<br><code>git branch -D [branch-name]</code> : 强制删除本地分支, 删除前不必一定要合并本地分支。<br><code>git push origin :[branch-name]</code> : 删除指定的远程服务器分支。<br><code>注意:</code>origin之后和冒号之前必须要空格，表示将空分支推送到远端，也就是删除远端分支。</p>
<hr>
<h3 id="clone分支"><a href="#clone分支" class="headerlink" title="clone分支"></a>clone分支</h3><p><code>git clone &lt;URL&gt;</code> : 默认clone方式，会将整个仓库都clone下来，但是只会在本地创建一个master分支。<br><code>git clone -b [branche-name] &lt;URL&gt;</code> : 只克仓库指定的分支，而不是将远端所有分支都clone下来。</p>
<h3 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h3><p><code>git branch -m origin devlop</code> ：将本地origin分支重命名为devlop分支。<br>重命名远程分支，即先删除远程分支，再将重命名后的分支推送到服务器上。</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo配置ssh key配置]]></title>
      <url>/2016/10/06/hexo-deploy-blog-to-github-whit-no-password/</url>
      <content type="html"><![CDATA[<p>在使用hexo地<code>hexo-deployer-git</code>插件进行发布<code>hexo blog</code>时， 有时会提醒没无正确的提交权限的错误，到导致无法提交博文到网上上。本文主要讲解如何设置github的ssh key以及免ssh key提交博文。<br><a id="more"></a></p>
<h3 id="前置说明"><a href="#前置说明" class="headerlink" title="前置说明"></a>前置说明</h3><p>本文使用的是<code>windows系统</code>，所以后续讲述的处理方案均指的是在windows系统下的操作。</p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在利用hexo写好博文，使用<code>hexo d</code>命令发布时，有时会遇到如下问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div><div class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class="line">Error: Permission denied (publickey).</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure></p>
<p>该问题明确说明，没有许可的提交权限。解决该问题的办法是配置<code>github</code>的<code>ssh key</code>, 下面来看看具体的配置过程是怎样的。</p>
<h3 id="利用git生成ssh-key"><a href="#利用git生成ssh-key" class="headerlink" title="利用git生成ssh key"></a>利用git生成ssh key</h3><p>1.查看<code>ssh key</code>文件是否已存在。如果有经了，可以直接跳过该步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div><div class="line">total 14</div><div class="line">drwxr-xr-x 1 Administrator None    0 Feb 18 11:38 ./</div><div class="line">drwxr-xr-x 1 Administrator None    0 Feb 18 11:33 ../</div><div class="line">-rw-r--r-- 1 Administrator None 1679 Feb 18 11:33 id_rsa</div><div class="line">-rw-r--r-- 1 Administrator None  410 Feb 18 11:33 id_rsa.pub</div><div class="line">-rw-r--r-- 1 Administrator None  407 Feb 18 11:38 known_hosts</div></pre></td></tr></table></figure></p>
<p>该机器上已经存在<code>ssh key</code>文件，所以为了后续讲解，就先删除然后再生成，windows系统中，默认生成的路径为<code>~/.ssh/</code>。</p>
<p>2.生成<code>ssh key</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your email&quot;</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:FRFyN04Om1vZmjlT1vkrcygf2CK6CtDHgux5MPrhygE chenliang901114@sina.com</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|        . *o+    |</div><div class="line">|         o X + ..|</div><div class="line">|          + = +..|</div><div class="line">|. o .    . o *  .|</div><div class="line">|E* o o  S . *   .|</div><div class="line">|+ = o       oo. .|</div><div class="line">|.+.o     . + * o |</div><div class="line">|.oo..   . . + =  |</div><div class="line">|.oo  ..o.    .   |</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure></p>
<p><code>注意</code>：<br>1.讲<code>ssh-keygen -t rsa -C &quot;your email&quot;</code>换成你的github的email即可。<br>2.<code>Enter file in which to save the key</code>：指定<code>ssh key</code>的生成路径。不用输入，默认是<code>~/.ssh/</code>路劲，即<code>/c/Users/Administrator/.ssh/id_rsa</code>。<br>3.<code>Enter passphrase (empty for no passphrase)</code>：这个推荐不输入，直接回车，原因是如果输入了，那么以后每次提交github时，都要输入这个密码来验证权限。在提交时比较麻烦费事。如果不输入，那么提交github时则不用验证在输入验证了，一步到位，直接提交。</p>
<h3 id="在github上配置ssh-key"><a href="#在github上配置ssh-key" class="headerlink" title="在github上配置ssh key"></a>在github上配置ssh key</h3><p>找到刚才生成ssh key文件中的<code>id_rsa.pub</code>的文件，打开，粘贴出来配置到github上，具体步骤如下：<br>1.登录github点击又上交的下拉按钮(View profile and more)。<br>2.选择<code>Settings</code>选项。<br>3.进入<code>Personal settings</code>界面，选择左边菜单中的<code>SSH and GPG keys</code>项。<br>4.点击右上角的<code>New SSH key</code>按钮，将<code>id_rsa.pub</code>的内容粘贴至Key中，Title此时可以随便输入。<br>5.最后点击<code>Add SSH key</code>，OK，至此，github ssh key 配置完成。<br><img src="http://p1.bpimg.com/1949/35d3a74df95a3b0e.png" alt="示例图"></p>
<h3 id="验证ssh-key-配置"><a href="#验证ssh-key-配置" class="headerlink" title="验证ssh key 配置"></a>验证ssh key 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">The authenticity of host &apos;github.com (192.30.253.113)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added &apos;github.com,192.30.253.113&apos; (RSA) to the list of known hosts.</div><div class="line">Hi 51stick! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<p>到此，说明github提交权限已经配置ok了。</p>
<h3 id="验证Hexo发布到github"><a href="#验证Hexo发布到github" class="headerlink" title="验证Hexo发布到github"></a>验证Hexo发布到github</h3><p>输入hexo发布命令，发布的最后将看到如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Warning: Permanently added the RSA host key for IP address &apos;192.30.253.112&apos; to the list of known hosts.</div><div class="line">Branch master set up to track remote branch master from git@github.com:51stick/51stick.github.io.git.</div><div class="line">To github.com:51stick/51stick.github.io.git</div><div class="line">   c22fcb4..b9077d8  HEAD -&gt; master</div><div class="line">INFO  Deploy done: git</div></pre></td></tr></table></figure></p>
<p>完美，到此，一件发布hexo博文到github配置完成。</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo环境安装与初始化指南]]></title>
      <url>/2016/10/05/hexo-install-init-guide/</url>
      <content type="html"><![CDATA[<p>本文主要讲述怎样在windows环境下安装并初始化hexo博客站点，涉及了hexo的基本安装。详细的配置请参考文所指的官网的指导。其中，文章中会使用到git工具，在此也默认读者会使用该工具，如果不熟悉的，请百度一下参考并学会使用。</p>
<a id="more"></a>
<h3 id="准备Hexo环境所需软件"><a href="#准备Hexo环境所需软件" class="headerlink" title="准备Hexo环境所需软件"></a>准备Hexo环境所需软件</h3><ol>
<li><a href="https://git-scm.com/" target="_blank" rel="external">下载 Git</a></li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">下载 node.js</a></li>
</ol>
<h3 id="安装Hexo使用环境"><a href="#安装Hexo使用环境" class="headerlink" title="安装Hexo使用环境"></a>安装Hexo使用环境</h3><ol>
<li>安装 Git</li>
<li>安装 node.js</li>
<li>设置npm淘宝镜像站，原因是在国内使用npm下载速度慢。配置方式如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<h3 id="检查Hexo环境是否安装成功"><a href="#检查Hexo环境是否安装成功" class="headerlink" title="检查Hexo环境是否安装成功"></a>检查Hexo环境是否安装成功</h3><p>打卡git客户端，以此输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git --version</div><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>如果能查看到相关软件的版本信息，则证明安装成功。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>以此在git客户端中执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cnpm install -g hexo-cli</div><div class="line">cnpm install hexo --save</div></pre></td></tr></table></figure></p>
<p>以上两个命令就是安装hexo，安装完成后，输入如下命令来验证hexo是否安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div></pre></td></tr></table></figure></p>
<p>如何hexo安装成功，输入上述命令则会看到类似以下的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">hexo: 3.2.2</div><div class="line">hexo-cli: 1.0.2</div><div class="line">os: Windows_NT 6.1.7601 win32 x64</div><div class="line">http_parser: 2.7.0</div><div class="line">node: 6.9.2</div><div class="line">v8: 5.1.281.88</div><div class="line">uv: 1.9.1</div><div class="line">zlib: 1.2.8</div><div class="line">ares: 1.10.1-DEV</div><div class="line">icu: 57.1</div><div class="line">modules: 48</div><div class="line">openssl: 1.0.2j</div></pre></td></tr></table></figure></p>
<h3 id="初始化Hexo静态站点"><a href="#初始化Hexo静态站点" class="headerlink" title="初始化Hexo静态站点"></a>初始化Hexo静态站点</h3><p>按顺序执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">cnpm install</div></pre></td></tr></table></figure></p>
<p>至此，会在指定文件夹下生成相应的站点文件。详细可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo指导文档</a>。</p>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo-server --save</div><div class="line">cnpm install hexo-admin --save</div><div class="line">cnpm install hexo-generator-archive --save</div><div class="line">cnpm install hexo-generator-feed --save</div><div class="line">cnpm install hexo-generator-search --save</div><div class="line">cnpm install hexo-generator-tag --save</div><div class="line">cnpm install hexo-deployer-git --save</div><div class="line">cnpm install hexo-generator-sitemap --save</div><div class="line">cnpm install hexo-renderer-jade --save</div><div class="line">cnpm install hexo-renderer-sass --save</div></pre></td></tr></table></figure>
<p>在使用其他的一些功能时，需要插件的支持，因此可以选择性的安装所需插件。</p>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>下载主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<p>主题安装完成后，主题的名字就是主题所在文件夹的名字，要启用新的主题，只需要修改站点根目录的<code>_config.yml</code>文件的<code>theme</code>配置项，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<h3 id="运行Hexo静态站点"><a href="#运行Hexo静态站点" class="headerlink" title="运行Hexo静态站点"></a>运行Hexo静态站点</h3><p>Hexo安装完成后，在初始化站点下使用如下命令集合运行起来：</p>
<ol>
<li>hexo g：编译生成静态资源文件</li>
<li>hexo s：运行hexo</li>
<li>hexo new  post postName：该命令会在your-hexo-site\source_posts文件夹下生成一个叫postName的博客文件。</li>
</ol>
<h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><p>更多关于Hexo请查询考<a href="https://hexo.io/" target="_blank" rel="external">hexo官方指南</a><br>更多关于<code>next</code>主题请参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">hexo-theme-next官方指南</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
